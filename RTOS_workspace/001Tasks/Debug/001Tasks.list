
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e24  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e9c  20012e9c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f16e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026dc  00000000  00000000  0002f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00032818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bc9  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001089d  00000000  00000000  000561d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d292a  00000000  00000000  00066a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001393a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004520  00000000  00000000  001393f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051b4 	.word	0x080051b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080051b4 	.word	0x080051b4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fba3 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f843 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8ab 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	status = xTaskCreate(printMessage1, "Task 1", 100, "Printing from task 1", 1, NULL);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <main+0x7c>)
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	4918      	ldr	r1, [pc, #96]	; (8000554 <main+0x80>)
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	f002 fb67 	bl	8002bc8 <xTaskCreate>
 80004fa:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d00a      	beq.n	8000518 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000506:	f383 8811 	msr	BASEPRI, r3
 800050a:	f3bf 8f6f 	isb	sy
 800050e:	f3bf 8f4f 	dsb	sy
 8000512:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000514:	bf00      	nop
 8000516:	e7fe      	b.n	8000516 <main+0x42>

  	status = xTaskCreate(printMessage2, "Task 2", 100, "Printing from task 2", 1, NULL);
 8000518:	2300      	movs	r3, #0
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2301      	movs	r3, #1
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x88>)
 8000522:	2264      	movs	r2, #100	; 0x64
 8000524:	490e      	ldr	r1, [pc, #56]	; (8000560 <main+0x8c>)
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0x90>)
 8000528:	f002 fb4e 	bl	8002bc8 <xTaskCreate>
 800052c:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d00a      	beq.n	800054a <main+0x76>
        __asm volatile
 8000534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000538:	f383 8811 	msr	BASEPRI, r3
 800053c:	f3bf 8f6f 	isb	sy
 8000540:	f3bf 8f4f 	dsb	sy
 8000544:	607b      	str	r3, [r7, #4]
    }
 8000546:	bf00      	nop
 8000548:	e7fe      	b.n	8000548 <main+0x74>

  	vTaskStartScheduler();
 800054a:	f002 fc83 	bl	8002e54 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	e7fe      	b.n	800054e <main+0x7a>
 8000550:	080051cc 	.word	0x080051cc
 8000554:	080051e4 	.word	0x080051e4
 8000558:	080008f9 	.word	0x080008f9
 800055c:	080051ec 	.word	0x080051ec
 8000560:	08005204 	.word	0x08005204
 8000564:	08000909 	.word	0x08000909

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 f908 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fdf3 	bl	80011d8 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9a0 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f854 	bl	80016c8 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f989 	bl	800093c <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	4ba2      	ldr	r3, [pc, #648]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4aa1      	ldr	r2, [pc, #644]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b9f      	ldr	r3, [pc, #636]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	4b9b      	ldr	r3, [pc, #620]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a9a      	ldr	r2, [pc, #616]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b98      	ldr	r3, [pc, #608]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b94      	ldr	r3, [pc, #592]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a93      	ldr	r2, [pc, #588]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b91      	ldr	r3, [pc, #580]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b8d      	ldr	r3, [pc, #564]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a8c      	ldr	r2, [pc, #560]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b8a      	ldr	r3, [pc, #552]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b86      	ldr	r3, [pc, #536]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a85      	ldr	r2, [pc, #532]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b83      	ldr	r3, [pc, #524]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b7f      	ldr	r3, [pc, #508]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a7e      	ldr	r2, [pc, #504]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b7c      	ldr	r3, [pc, #496]	; (80008e0 <MX_GPIO_Init+0x2a4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4879      	ldr	r0, [pc, #484]	; (80008e4 <MX_GPIO_Init+0x2a8>)
 8000700:	f000 fd50 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4877      	ldr	r0, [pc, #476]	; (80008e8 <MX_GPIO_Init+0x2ac>)
 800070a:	f000 fd4b 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	2200      	movs	r2, #0
 8000710:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000714:	4875      	ldr	r0, [pc, #468]	; (80008ec <MX_GPIO_Init+0x2b0>)
 8000716:	f000 fd45 	bl	80011a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071a:	2308      	movs	r3, #8
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	486c      	ldr	r0, [pc, #432]	; (80008e4 <MX_GPIO_Init+0x2a8>)
 8000732:	f000 fb9b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000736:	2301      	movs	r3, #1
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4866      	ldr	r0, [pc, #408]	; (80008e8 <MX_GPIO_Init+0x2ac>)
 800074e:	f000 fb8d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000762:	2305      	movs	r3, #5
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	485e      	ldr	r0, [pc, #376]	; (80008e8 <MX_GPIO_Init+0x2ac>)
 800076e:	f000 fb7d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	485a      	ldr	r0, [pc, #360]	; (80008f0 <MX_GPIO_Init+0x2b4>)
 8000788:	f000 fb70 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800078c:	2310      	movs	r3, #16
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800079c:	2306      	movs	r3, #6
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4852      	ldr	r0, [pc, #328]	; (80008f0 <MX_GPIO_Init+0x2b4>)
 80007a8:	f000 fb60 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007ac:	23e0      	movs	r3, #224	; 0xe0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007bc:	2305      	movs	r3, #5
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	484a      	ldr	r0, [pc, #296]	; (80008f0 <MX_GPIO_Init+0x2b4>)
 80007c8:	f000 fb50 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007cc:	2304      	movs	r3, #4
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4845      	ldr	r0, [pc, #276]	; (80008f4 <MX_GPIO_Init+0x2b8>)
 80007e0:	f000 fb44 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f6:	2305      	movs	r3, #5
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	483c      	ldr	r0, [pc, #240]	; (80008f4 <MX_GPIO_Init+0x2b8>)
 8000802:	f000 fb33 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000806:	f24f 0310 	movw	r3, #61456	; 0xf010
 800080a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4833      	ldr	r0, [pc, #204]	; (80008ec <MX_GPIO_Init+0x2b0>)
 8000820:	f000 fb24 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000824:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000836:	2306      	movs	r3, #6
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4829      	ldr	r0, [pc, #164]	; (80008e8 <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fb13 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <MX_GPIO_Init+0x2b4>)
 800085c:	f000 fb06 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000860:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000872:	230a      	movs	r3, #10
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_GPIO_Init+0x2b4>)
 800087e:	f000 faf5 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <MX_GPIO_Init+0x2b0>)
 8000896:	f000 fae9 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ac:	2304      	movs	r3, #4
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <MX_GPIO_Init+0x2b8>)
 80008b8:	f000 fad8 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0x2a8>)
 80008d2:	f000 facb 	bl	8000e6c <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400

080008f8 <printMessage1>:

/* USER CODE BEGIN 4 */
void printMessage1(void* params){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

	for(;;)
		printf("%s\n", (char*)params);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f003 ffb9 	bl	8004878 <puts>
 8000906:	e7fb      	b.n	8000900 <printMessage1+0x8>

08000908 <printMessage2>:

	vTaskDelete(NULL);
}

void printMessage2(void* params){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	for(;;)
		printf("%s\n", (char*)params);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f003 ffb1 	bl	8004878 <puts>
 8000916:	e7fb      	b.n	8000910 <printMessage2+0x8>

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f99d 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <HAL_InitTick+0xe4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <HAL_InitTick+0xe4>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f886 	bl	8001ae0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f001 f86b 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 80009e2:	6378      	str	r0, [r7, #52]	; 0x34
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f001 f867 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_InitTick+0xe8>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_InitTick+0xec>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <HAL_InitTick+0xf0>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_InitTick+0xec>)
 8000a06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <HAL_InitTick+0xec>)
 8000a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_InitTick+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <HAL_InitTick+0xec>)
 8000a26:	f001 f88d 	bl	8001b44 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <HAL_InitTick+0xec>)
 8000a3a:	f001 f8dd 	bl	8001bf8 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a4c:	2036      	movs	r0, #54	; 0x36
 8000a4e:	f000 f9ff 	bl	8000e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	; 0x36
 8000a5e:	f000 f9db 	bl	8000e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0xf4>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3738      	adds	r7, #56	; 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000094 	.word	0x20000094
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM6_DAC_IRQHandler+0x10>)
 8000ac2:	f001 f909 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000094 	.word	0x20000094

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
	}
	return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fd93 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fc67 	bl	80004d4 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c14:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8000c18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c1c:	20012e9c 	.word	0x20012e9c

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fea0 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe76 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200000dc 	.word	0x200000dc

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e16b      	b.n	8001160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 815a 	bne.w	800115a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80b4 	beq.w	800115a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a5f      	ldr	r2, [pc, #380]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a5b      	ldr	r2, [pc, #364]	; (800117c <HAL_GPIO_Init+0x310>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x216>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x328>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x212>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x32c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x20e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x330>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x20a>
 8001072:	2307      	movs	r3, #7
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001076:	2308      	movs	r3, #8
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x310>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae90 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e267      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6c      	ldr	r2, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fcfe 	bl	8000c90 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fcfa 	bl	8000c90 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e207      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcea 	bl	8000c90 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fce6 	bl	8000c90 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f3      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fc9f 	bl	8000c90 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc9b 	bl	8000c90 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a8      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4925      	ldr	r1, [pc, #148]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc7e 	bl	8000c90 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc7a 	bl	8000c90 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e187      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d036      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc5e 	bl	8000c90 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc5a 	bl	8000c90 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e167      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc47 	bl	8000c90 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fc43 	bl	8000c90 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d907      	bls.n	8001424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e150      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ea      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8097 	beq.w	800156c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b74      	ldr	r3, [pc, #464]	; (800164c <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a73      	ldr	r2, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc03 	bl	8000c90 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fbff 	bl	8000c90 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e10c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x474>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fbc4 	bl	8000c90 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fbc0 	bl	8000c90 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0cb      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ee      	beq.n	800150c <HAL_RCC_OscConfig+0x334>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fbae 	bl	8000c90 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fbaa 	bl	8000c90 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b5      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ee      	bne.n	8001538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a1 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb7e 	bl	8000c90 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb7a 	bl	8000c90 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb53 	bl	8000c90 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb4f 	bl	8000c90 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x416>
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb3c 	bl	8000c90 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb38 	bl	8000c90 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e038      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d028      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d121      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff fa6a 	bl	8000c90 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff fa66 	bl	8000c90 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f892 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	08005224 	.word	0x08005224
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001898:	b094      	sub	sp, #80	; 0x50
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80e1 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e0db      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018cc:	e0db      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d2:	e0d8      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001906:	4622      	mov	r2, r4
 8001908:	462b      	mov	r3, r5
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4621      	mov	r1, r4
 8001920:	1a51      	subs	r1, r2, r1
 8001922:	6139      	str	r1, [r7, #16]
 8001924:	4629      	mov	r1, r5
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001938:	4659      	mov	r1, fp
 800193a:	018b      	lsls	r3, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001942:	4651      	mov	r1, sl
 8001944:	018a      	lsls	r2, r1, #6
 8001946:	4651      	mov	r1, sl
 8001948:	ebb2 0801 	subs.w	r8, r2, r1
 800194c:	4659      	mov	r1, fp
 800194e:	eb63 0901 	sbc.w	r9, r3, r1
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001966:	4690      	mov	r8, r2
 8001968:	4699      	mov	r9, r3
 800196a:	4623      	mov	r3, r4
 800196c:	eb18 0303 	adds.w	r3, r8, r3
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	462b      	mov	r3, r5
 8001974:	eb49 0303 	adc.w	r3, r9, r3
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001986:	4629      	mov	r1, r5
 8001988:	024b      	lsls	r3, r1, #9
 800198a:	4621      	mov	r1, r4
 800198c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001990:	4621      	mov	r1, r4
 8001992:	024a      	lsls	r2, r1, #9
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	2200      	movs	r2, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
 800199e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a4:	f7fe fc14 	bl	80001d0 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b0:	e058      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	2200      	movs	r2, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	4611      	mov	r1, r2
 80019be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019cc:	4642      	mov	r2, r8
 80019ce:	464b      	mov	r3, r9
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	0159      	lsls	r1, r3, #5
 80019da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019de:	0150      	lsls	r0, r2, #5
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4641      	mov	r1, r8
 80019e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ea:	4649      	mov	r1, r9
 80019ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a04:	ebb2 040a 	subs.w	r4, r2, sl
 8001a08:	eb63 050b 	sbc.w	r5, r3, fp
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	00eb      	lsls	r3, r5, #3
 8001a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1a:	00e2      	lsls	r2, r4, #3
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4643      	mov	r3, r8
 8001a22:	18e3      	adds	r3, r4, r3
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	464b      	mov	r3, r9
 8001a28:	eb45 0303 	adc.w	r3, r5, r3
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	028b      	lsls	r3, r1, #10
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a44:	4621      	mov	r1, r4
 8001a46:	028a      	lsls	r2, r1, #10
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	61fa      	str	r2, [r7, #28]
 8001a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a58:	f7fe fbba 	bl	80001d0 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3750      	adds	r7, #80	; 0x50
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08005234 	.word	0x08005234

08001ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	220f      	movs	r2, #15
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_RCC_GetClockConfig+0x60>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0207 	and.w	r2, r3, #7
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e041      	b.n	8001bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f839 	bl	8001be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f000 f9d8 	bl	8001f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e04e      	b.n	8001cae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d022      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d01d      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d018      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x80>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d010      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	e007      	b.n	8001cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	40000c00 	.word	0x40000c00
 8001ccc:	40010400 	.word	0x40010400
 8001cd0:	40014000 	.word	0x40014000
 8001cd4:	40001800 	.word	0x40001800

08001cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0202 	mvn.w	r2, #2
 8001d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8ee 	bl	8001efc <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8e0 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8f1 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0204 	mvn.w	r2, #4
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8c4 	bl	8001efc <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8b6 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8c7 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0208 	mvn.w	r2, #8
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2204      	movs	r2, #4
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f89a 	bl	8001efc <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f88c 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f89d 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0210 	mvn.w	r2, #16
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2208      	movs	r2, #8
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f870 	bl	8001efc <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f862 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f873 	bl	8001f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0201 	mvn.w	r2, #1
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fd5e 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	2b80      	cmp	r3, #128	; 0x80
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f902 	bl	800208c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	2b40      	cmp	r3, #64	; 0x40
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f838 	bl	8001f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0220 	mvn.w	r2, #32
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8cc 	bl	8002078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a40      	ldr	r2, [pc, #256]	; (800204c <TIM_Base_SetConfig+0x114>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f56:	d00f      	beq.n	8001f78 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3d      	ldr	r2, [pc, #244]	; (8002050 <TIM_Base_SetConfig+0x118>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <TIM_Base_SetConfig+0x11c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <TIM_Base_SetConfig+0x120>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3a      	ldr	r2, [pc, #232]	; (800205c <TIM_Base_SetConfig+0x124>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	; (800204c <TIM_Base_SetConfig+0x114>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d027      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2c      	ldr	r2, [pc, #176]	; (8002050 <TIM_Base_SetConfig+0x118>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d023      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <TIM_Base_SetConfig+0x11c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <TIM_Base_SetConfig+0x120>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01b      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <TIM_Base_SetConfig+0x124>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d017      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	; (8002060 <TIM_Base_SetConfig+0x128>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <TIM_Base_SetConfig+0x12c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00f      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <TIM_Base_SetConfig+0x130>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00b      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <TIM_Base_SetConfig+0x134>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <TIM_Base_SetConfig+0x138>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <TIM_Base_SetConfig+0x13c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d108      	bne.n	8001ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <TIM_Base_SetConfig+0x114>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <TIM_Base_SetConfig+0xf8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <TIM_Base_SetConfig+0x124>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d103      	bne.n	8002038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	615a      	str	r2, [r3, #20]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40010400 	.word	0x40010400
 8002060:	40014000 	.word	0x40014000
 8002064:	40014400 	.word	0x40014400
 8002068:	40014800 	.word	0x40014800
 800206c:	40001800 	.word	0x40001800
 8002070:	40001c00 	.word	0x40001c00
 8002074:	40002000 	.word	0x40002000

08002078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0208 	add.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 0208 	add.w	r2, r3, #8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0208 	add.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002158:	d103      	bne.n	8002162 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e00c      	b.n	800217c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3308      	adds	r3, #8
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e002      	b.n	8002170 <vListInsert+0x2e>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	d2f6      	bcs.n	800216a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6892      	ldr	r2, [r2, #8]
 80021ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6852      	ldr	r2, [r2, #4]
 80021d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d103      	bne.n	80021e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <xQueueGenericReset+0x2a>
        __asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60bb      	str	r3, [r7, #8]
    }
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002232:	f001 ff59 	bl	80040e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	68f9      	ldr	r1, [r7, #12]
 8002240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	441a      	add	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d114      	bne.n	80022b2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01a      	beq.n	80022c6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3310      	adds	r3, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f001 f84d 	bl	8003334 <xTaskRemoveFromEventList>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <xQueueGenericReset+0xcc>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	e009      	b.n	80022c6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3310      	adds	r3, #16
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fef2 	bl	80020a0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3324      	adds	r3, #36	; 0x24
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff feed 	bl	80020a0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022c6:	f001 ff3f 	bl	8004148 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <xQueueGenericCreate+0x2a>
        __asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	61bb      	str	r3, [r7, #24]
    }
 80022fe:	bf00      	nop
 8002300:	e7fe      	b.n	8002300 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <xQueueGenericCreate+0x48>
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d101      	bne.n	8002324 <xQueueGenericCreate+0x4c>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <xQueueGenericCreate+0x4e>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <xQueueGenericCreate+0x68>
        __asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	617b      	str	r3, [r7, #20]
    }
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002346:	d90a      	bls.n	800235e <xQueueGenericCreate+0x86>
        __asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	613b      	str	r3, [r7, #16]
    }
 800235a:	bf00      	nop
 800235c:	e7fe      	b.n	800235c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3350      	adds	r3, #80	; 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f001 ffe2 	bl	800432c <pvPortMalloc>
 8002368:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3350      	adds	r3, #80	; 0x50
 8002378:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f805 	bl	8002396 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800238c:	6a3b      	ldr	r3, [r7, #32]
    }
 800238e:	4618      	mov	r0, r3
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e002      	b.n	80023b8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023c4:	2101      	movs	r1, #1
 80023c6:	69b8      	ldr	r0, [r7, #24]
 80023c8:	f7ff ff1e 	bl	8002208 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueGenericSend+0x32>
        __asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <xQueueGenericSend+0x40>
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <xQueueGenericSend+0x44>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <xQueueGenericSend+0x46>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <xQueueGenericSend+0x60>
        __asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002438:	bf00      	nop
 800243a:	e7fe      	b.n	800243a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d103      	bne.n	800244a <xQueueGenericSend+0x6e>
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <xQueueGenericSend+0x72>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <xQueueGenericSend+0x74>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <xQueueGenericSend+0x8e>
        __asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	623b      	str	r3, [r7, #32]
    }
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800246a:	f001 f8ff 	bl	800366c <xTaskGetSchedulerState>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <xQueueGenericSend+0x9e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <xQueueGenericSend+0xa2>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <xQueueGenericSend+0xa4>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <xQueueGenericSend+0xbe>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	61fb      	str	r3, [r7, #28]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800249a:	f001 fe25 	bl	80040e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <xQueueGenericSend+0xd4>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d129      	bne.n	8002504 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b6:	f000 fa19 	bl	80028ec <prvCopyDataToQueue>
 80024ba:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	3324      	adds	r3, #36	; 0x24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 ff33 	bl	8003334 <xTaskRemoveFromEventList>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <xQueueGenericSend+0x1f8>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	e00a      	b.n	80024fc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024ec:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <xQueueGenericSend+0x1f8>)
 80024ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024fc:	f001 fe24 	bl	8004148 <vPortExitCritical>
                return pdPASS;
 8002500:	2301      	movs	r3, #1
 8002502:	e063      	b.n	80025cc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800250a:	f001 fe1d 	bl	8004148 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800250e:	2300      	movs	r3, #0
 8002510:	e05c      	b.n	80025cc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4618      	mov	r0, r3
 800251e:	f000 ff6b 	bl	80033f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002522:	2301      	movs	r3, #1
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002526:	f001 fe0f 	bl	8004148 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800252a:	f000 fce5 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800252e:	f001 fddb 	bl	80040e8 <vPortEnterCritical>
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002538:	b25b      	sxtb	r3, r3
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253e:	d103      	bne.n	8002548 <xQueueGenericSend+0x16c>
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254e:	b25b      	sxtb	r3, r3
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002554:	d103      	bne.n	800255e <xQueueGenericSend+0x182>
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255e:	f001 fdf3 	bl	8004148 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002562:	1d3a      	adds	r2, r7, #4
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f000 ff5a 	bl	8003424 <xTaskCheckForTimeOut>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d124      	bne.n	80025c0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002578:	f000 fab0 	bl	8002adc <prvIsQueueFull>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d018      	beq.n	80025b4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	3310      	adds	r3, #16
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fe82 	bl	8003294 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002592:	f000 fa3b 	bl	8002a0c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002596:	f000 fcbd 	bl	8002f14 <xTaskResumeAll>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f47f af7c 	bne.w	800249a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <xQueueGenericSend+0x1f8>)
 80025a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	e772      	b.n	800249a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b6:	f000 fa29 	bl	8002a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025ba:	f000 fcab 	bl	8002f14 <xTaskResumeAll>
 80025be:	e76c      	b.n	800249a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c2:	f000 fa23 	bl	8002a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025c6:	f000 fca5 	bl	8002f14 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80025ca:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3738      	adds	r7, #56	; 0x38
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	e000ed04 	.word	0xe000ed04

080025d8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b090      	sub	sp, #64	; 0x40
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <xQueueGenericSendFromISR+0x3c>
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <xQueueGenericSendFromISR+0x40>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <xQueueGenericSendFromISR+0x42>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d103      	bne.n	8002642 <xQueueGenericSendFromISR+0x6a>
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <xQueueGenericSendFromISR+0x6e>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueGenericSendFromISR+0x70>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	623b      	str	r3, [r7, #32]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002662:	f001 fe23 	bl	80042ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002666:	f3ef 8211 	mrs	r2, BASEPRI
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	61fa      	str	r2, [r7, #28]
 800267c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800267e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <xQueueGenericSendFromISR+0xbc>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d13e      	bne.n	8002712 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800269a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026aa:	f000 f91f 	bl	80028ec <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b6:	d112      	bne.n	80026de <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d025      	beq.n	800270c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	3324      	adds	r3, #36	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fe35 	bl	8003334 <xTaskRemoveFromEventList>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01d      	beq.n	800270c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01a      	beq.n	800270c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e016      	b.n	800270c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80026de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	617b      	str	r3, [r7, #20]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002700:	3301      	adds	r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	b25a      	sxtb	r2, r3
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800270c:	2301      	movs	r3, #1
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002710:	e001      	b.n	8002716 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002712:	2300      	movs	r3, #0
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002720:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002724:	4618      	mov	r0, r3
 8002726:	3740      	adds	r7, #64	; 0x40
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <xQueueReceive+0x30>
        __asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	623b      	str	r3, [r7, #32]
    }
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <xQueueReceive+0x3e>
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <xQueueReceive+0x42>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xQueueReceive+0x44>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueReceive+0x5e>
        __asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61fb      	str	r3, [r7, #28]
    }
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800278a:	f000 ff6f 	bl	800366c <xTaskGetSchedulerState>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <xQueueReceive+0x6e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <xQueueReceive+0x72>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <xQueueReceive+0x74>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <xQueueReceive+0x8e>
        __asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	61bb      	str	r3, [r7, #24]
    }
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027ba:	f001 fc95 	bl	80040e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01f      	beq.n	800280a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ce:	f000 f8f7 	bl	80029c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00f      	beq.n	8002802 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	3310      	adds	r3, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fda4 	bl	8003334 <xTaskRemoveFromEventList>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <xQueueReceive+0x1bc>)
 80027f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002802:	f001 fca1 	bl	8004148 <vPortExitCritical>
                return pdPASS;
 8002806:	2301      	movs	r3, #1
 8002808:	e069      	b.n	80028de <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002810:	f001 fc9a 	bl	8004148 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002814:	2300      	movs	r3, #0
 8002816:	e062      	b.n	80028de <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800281e:	f107 0310 	add.w	r3, r7, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fde8 	bl	80033f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002828:	2301      	movs	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800282c:	f001 fc8c 	bl	8004148 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002830:	f000 fb62 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002834:	f001 fc58 	bl	80040e8 <vPortEnterCritical>
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002844:	d103      	bne.n	800284e <xQueueReceive+0x122>
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285a:	d103      	bne.n	8002864 <xQueueReceive+0x138>
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002864:	f001 fc70 	bl	8004148 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002868:	1d3a      	adds	r2, r7, #4
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fdd7 	bl	8003424 <xTaskCheckForTimeOut>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d123      	bne.n	80028c4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800287c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287e:	f000 f917 	bl	8002ab0 <prvIsQueueEmpty>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	3324      	adds	r3, #36	; 0x24
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fcff 	bl	8003294 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002898:	f000 f8b8 	bl	8002a0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800289c:	f000 fb3a 	bl	8002f14 <xTaskResumeAll>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d189      	bne.n	80027ba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <xQueueReceive+0x1bc>)
 80028a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	e780      	b.n	80027ba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ba:	f000 f8a7 	bl	8002a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028be:	f000 fb29 	bl	8002f14 <xTaskResumeAll>
 80028c2:	e77a      	b.n	80027ba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c6:	f000 f8a1 	bl	8002a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028ca:	f000 fb23 	bl	8002f14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d0:	f000 f8ee 	bl	8002ab0 <prvIsQueueEmpty>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f43f af6f 	beq.w	80027ba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80028dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d14d      	bne.n	80029ae <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fec6 	bl	80036a8 <xTaskPriorityDisinherit>
 800291c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e043      	b.n	80029ae <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d119      	bne.n	8002960 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6858      	ldr	r0, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	461a      	mov	r2, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	f001 ff1a 	bl	8004770 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	441a      	add	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d32b      	bcc.n	80029ae <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e026      	b.n	80029ae <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68d8      	ldr	r0, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	461a      	mov	r2, r3
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	f001 ff00 	bl	8004770 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	425b      	negs	r3, r3
 800297a:	441a      	add	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d207      	bcs.n	800299c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	425b      	negs	r3, r3
 8002996:	441a      	add	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d105      	bne.n	80029ae <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d303      	bcc.n	80029f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68d9      	ldr	r1, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	461a      	mov	r2, r3
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	f001 feb6 	bl	8004770 <memcpy>
    }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a14:	f001 fb68 	bl	80040e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a20:	e011      	b.n	8002a46 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3324      	adds	r3, #36	; 0x24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fc80 	bl	8003334 <xTaskRemoveFromEventList>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a3a:	f000 fd59 	bl	80034f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	dce9      	bgt.n	8002a22 <prvUnlockQueue+0x16>
 8002a4e:	e000      	b.n	8002a52 <prvUnlockQueue+0x46>
                        break;
 8002a50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a5a:	f001 fb75 	bl	8004148 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a5e:	f001 fb43 	bl	80040e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a6a:	e011      	b.n	8002a90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3310      	adds	r3, #16
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fc5b 	bl	8003334 <xTaskRemoveFromEventList>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a84:	f000 fd34 	bl	80034f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	dce9      	bgt.n	8002a6c <prvUnlockQueue+0x60>
 8002a98:	e000      	b.n	8002a9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002aa4:	f001 fb50 	bl	8004148 <vPortExitCritical>
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ab8:	f001 fb16 	bl	80040e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e001      	b.n	8002ace <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ace:	f001 fb3b 	bl	8004148 <vPortExitCritical>

    return xReturn;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ae4:	f001 fb00 	bl	80040e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d102      	bne.n	8002afa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e001      	b.n	8002afe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002afe:	f001 fb23 	bl	8004148 <vPortExitCritical>

    return xReturn;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e014      	b.n	8002b46 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <vQueueAddToRegistry+0x50>)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <vQueueAddToRegistry+0x50>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <vQueueAddToRegistry+0x50>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002b3e:	e006      	b.n	8002b4e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b07      	cmp	r3, #7
 8002b4a:	d9e7      	bls.n	8002b1c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	200000e0 	.word	0x200000e0

08002b60 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b70:	f001 faba 	bl	80040e8 <vPortEnterCritical>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d103      	bne.n	8002b8a <vQueueWaitForMessageRestricted+0x2a>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b96:	d103      	bne.n	8002ba0 <vQueueWaitForMessageRestricted+0x40>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba0:	f001 fad2 	bl	8004148 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fb91 	bl	80032dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff26 	bl	8002a0c <prvUnlockQueue>
    }
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fba5 	bl	800432c <pvPortMalloc>
 8002be2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00e      	beq.n	8002c08 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bea:	2058      	movs	r0, #88	; 0x58
 8002bec:	f001 fb9e 	bl	800432c <pvPortMalloc>
 8002bf0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfe:	e005      	b.n	8002c0c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f001 fc73 	bl	80044ec <vPortFree>
 8002c06:	e001      	b.n	8002c0c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	2300      	movs	r3, #0
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f80e 	bl	8002c4a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c2e:	69f8      	ldr	r0, [r7, #28]
 8002c30:	f000 f8a2 	bl	8002d78 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c34:	2301      	movs	r3, #1
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e002      	b.n	8002c40 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c40:	69bb      	ldr	r3, [r7, #24]
    }
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b088      	sub	sp, #32
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	21a5      	movs	r1, #165	; 0xa5
 8002c64:	f001 fd92 	bl	800478c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c72:	3b01      	subs	r3, #1
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f023 0307 	bic.w	r3, r3, #7
 8002c80:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	617b      	str	r3, [r7, #20]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01f      	beq.n	8002ce8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	e012      	b.n	8002cd4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	7819      	ldrb	r1, [r3, #0]
 8002cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3334      	adds	r3, #52	; 0x34
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	d9e9      	bls.n	8002cae <prvInitialiseNewTask+0x64>
 8002cda:	e000      	b.n	8002cde <prvInitialiseNewTask+0x94>
            {
                break;
 8002cdc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ce6:	e003      	b.n	8002cf0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d901      	bls.n	8002cfa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d04:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	2200      	movs	r2, #0
 8002d0a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f9e5 	bl	80020e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	3318      	adds	r3, #24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f9e0 	bl	80020e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d24:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	f1c3 0205 	rsb	r2, r3, #5
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	3350      	adds	r3, #80	; 0x50
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fd24 	bl	800478c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	3354      	adds	r3, #84	; 0x54
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 fd1d 	bl	800478c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	69b8      	ldr	r0, [r7, #24]
 8002d58:	f001 f898 	bl	8003e8c <pxPortInitialiseStack>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d6e:	bf00      	nop
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d80:	f001 f9b2 	bl	80040e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <prvAddNewTaskToReadyList+0xc0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <prvAddNewTaskToReadyList+0xc0>)
 8002d8c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d8e:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <prvAddNewTaskToReadyList+0xc0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d110      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002da4:	f000 fbc8 	bl	8003538 <prvInitialiseTaskLists>
 8002da8:	e00d      	b.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d802      	bhi.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <prvAddNewTaskToReadyList+0xcc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <prvAddNewTaskToReadyList+0xcc>)
 8002dce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <prvAddNewTaskToReadyList+0xcc>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <prvAddNewTaskToReadyList+0xd0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <prvAddNewTaskToReadyList+0xd0>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <prvAddNewTaskToReadyList+0xd4>)
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7ff f97a 	bl	80020fa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e06:	f001 f99f 	bl	8004148 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <prvAddNewTaskToReadyList+0xd8>)
 8002e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200001f8 	.word	0x200001f8
 8002e3c:	20000120 	.word	0x20000120
 8002e40:	20000204 	.word	0x20000204
 8002e44:	20000214 	.word	0x20000214
 8002e48:	20000200 	.word	0x20000200
 8002e4c:	20000124 	.word	0x20000124
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <vTaskStartScheduler+0x88>)
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2282      	movs	r2, #130	; 0x82
 8002e66:	491e      	ldr	r1, [pc, #120]	; (8002ee0 <vTaskStartScheduler+0x8c>)
 8002e68:	481e      	ldr	r0, [pc, #120]	; (8002ee4 <vTaskStartScheduler+0x90>)
 8002e6a:	f7ff fead 	bl	8002bc8 <xTaskCreate>
 8002e6e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e76:	f000 fcf7 	bl	8003868 <xTimerCreateTimerTask>
 8002e7a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d116      	bne.n	8002eb0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
    }
 8002e94:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <vTaskStartScheduler+0x94>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e9c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <vTaskStartScheduler+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <vTaskStartScheduler+0x9c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002eaa:	f001 f87b 	bl	8003fa4 <xPortStartScheduler>
 8002eae:	e00e      	b.n	8002ece <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb6:	d10a      	bne.n	8002ece <vTaskStartScheduler+0x7a>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	607b      	str	r3, [r7, #4]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <vTaskStartScheduler+0xa0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000021c 	.word	0x2000021c
 8002ee0:	0800520c 	.word	0x0800520c
 8002ee4:	08003509 	.word	0x08003509
 8002ee8:	20000218 	.word	0x20000218
 8002eec:	20000204 	.word	0x20000204
 8002ef0:	200001fc 	.word	0x200001fc
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002f04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000220 	.word	0x20000220

08002f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <xTaskResumeAll+0x114>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	603b      	str	r3, [r7, #0]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f40:	f001 f8d2 	bl	80040e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f44:	4b38      	ldr	r3, [pc, #224]	; (8003028 <xTaskResumeAll+0x114>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a37      	ldr	r2, [pc, #220]	; (8003028 <xTaskResumeAll+0x114>)
 8002f4c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <xTaskResumeAll+0x114>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d161      	bne.n	800301a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f56:	4b35      	ldr	r3, [pc, #212]	; (800302c <xTaskResumeAll+0x118>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d05d      	beq.n	800301a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f5e:	e02e      	b.n	8002fbe <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f60:	4b33      	ldr	r3, [pc, #204]	; (8003030 <xTaskResumeAll+0x11c>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f921 	bl	80021b4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f91c 	bl	80021b4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <xTaskResumeAll+0x120>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <xTaskResumeAll+0x120>)
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4a27      	ldr	r2, [pc, #156]	; (8003038 <xTaskResumeAll+0x124>)
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7ff f8a8 	bl	80020fa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <xTaskResumeAll+0x128>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <xTaskResumeAll+0x12c>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <xTaskResumeAll+0x11c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cc      	bne.n	8002f60 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fcc:	f000 fb32 	bl	8003634 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <xTaskResumeAll+0x130>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fdc:	f000 f846 	bl	800306c <xTaskIncrementTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <xTaskResumeAll+0x12c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f1      	bne.n	8002fdc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <xTaskResumeAll+0x130>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <xTaskResumeAll+0x12c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003006:	2301      	movs	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <xTaskResumeAll+0x134>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800301a:	f001 f895 	bl	8004148 <vPortExitCritical>

    return xAlreadyYielded;
 800301e:	68bb      	ldr	r3, [r7, #8]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000220 	.word	0x20000220
 800302c:	200001f8 	.word	0x200001f8
 8003030:	200001b8 	.word	0x200001b8
 8003034:	20000200 	.word	0x20000200
 8003038:	20000124 	.word	0x20000124
 800303c:	20000120 	.word	0x20000120
 8003040:	2000020c 	.word	0x2000020c
 8003044:	20000208 	.word	0x20000208
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <xTaskGetTickCount+0x1c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200001fc 	.word	0x200001fc

0800306c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003076:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <xTaskIncrementTick+0x144>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 808e 	bne.w	800319c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003080:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <xTaskIncrementTick+0x148>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003088:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <xTaskIncrementTick+0x148>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d120      	bne.n	80030d6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <xTaskIncrementTick+0x14c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <xTaskIncrementTick+0x48>
        __asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	603b      	str	r3, [r7, #0]
    }
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xTaskIncrementTick+0x46>
 80030b4:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <xTaskIncrementTick+0x14c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <xTaskIncrementTick+0x150>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3e      	ldr	r2, [pc, #248]	; (80031b8 <xTaskIncrementTick+0x14c>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4a3e      	ldr	r2, [pc, #248]	; (80031bc <xTaskIncrementTick+0x150>)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <xTaskIncrementTick+0x154>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <xTaskIncrementTick+0x154>)
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	f000 faaf 	bl	8003634 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <xTaskIncrementTick+0x158>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d348      	bcc.n	8003172 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <xTaskIncrementTick+0x14c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <xTaskIncrementTick+0x158>)
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f0:	601a      	str	r2, [r3, #0]
                    break;
 80030f2:	e03e      	b.n	8003172 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <xTaskIncrementTick+0x14c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d203      	bcs.n	8003114 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800310c:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <xTaskIncrementTick+0x158>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003112:	e02e      	b.n	8003172 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3304      	adds	r3, #4
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f84b 	bl	80021b4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3318      	adds	r3, #24
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f842 	bl	80021b4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <xTaskIncrementTick+0x15c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4313      	orrs	r3, r2
 800313e:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <xTaskIncrementTick+0x15c>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <xTaskIncrementTick+0x160>)
 8003150:	441a      	add	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe ffce 	bl	80020fa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <xTaskIncrementTick+0x164>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d3b9      	bcc.n	80030e0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003170:	e7b6      	b.n	80030e0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <xTaskIncrementTick+0x164>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	4914      	ldr	r1, [pc, #80]	; (80031cc <xTaskIncrementTick+0x160>)
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d901      	bls.n	800318e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800318a:	2301      	movs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <xTaskIncrementTick+0x168>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e004      	b.n	80031a6 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <xTaskIncrementTick+0x16c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <xTaskIncrementTick+0x16c>)
 80031a4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031a6:	697b      	ldr	r3, [r7, #20]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000220 	.word	0x20000220
 80031b4:	200001fc 	.word	0x200001fc
 80031b8:	200001b0 	.word	0x200001b0
 80031bc:	200001b4 	.word	0x200001b4
 80031c0:	20000210 	.word	0x20000210
 80031c4:	20000218 	.word	0x20000218
 80031c8:	20000200 	.word	0x20000200
 80031cc:	20000124 	.word	0x20000124
 80031d0:	20000120 	.word	0x20000120
 80031d4:	2000020c 	.word	0x2000020c
 80031d8:	20000208 	.word	0x20000208

080031dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <vTaskSwitchContext+0xa4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <vTaskSwitchContext+0xa8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031f0:	e03f      	b.n	8003272 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <vTaskSwitchContext+0xa8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <vTaskSwitchContext+0xac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f1c3 031f 	rsb	r3, r3, #31
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	491f      	ldr	r1, [pc, #124]	; (800328c <vTaskSwitchContext+0xb0>)
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	607b      	str	r3, [r7, #4]
    }
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <vTaskSwitchContext+0x5a>
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <vTaskSwitchContext+0xb0>)
 8003244:	4413      	add	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3308      	adds	r3, #8
 800325a:	429a      	cmp	r2, r3
 800325c:	d104      	bne.n	8003268 <vTaskSwitchContext+0x8c>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <vTaskSwitchContext+0xb4>)
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000220 	.word	0x20000220
 8003284:	2000020c 	.word	0x2000020c
 8003288:	20000200 	.word	0x20000200
 800328c:	20000124 	.word	0x20000124
 8003290:	20000120 	.word	0x20000120

08003294 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	60fb      	str	r3, [r7, #12]
    }
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <vTaskPlaceOnEventList+0x44>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3318      	adds	r3, #24
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe ff3d 	bl	8002142 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032c8:	2101      	movs	r1, #1
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f000 fa66 	bl	800379c <prvAddCurrentTaskToDelayedList>
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000120 	.word	0x20000120

080032dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	617b      	str	r3, [r7, #20]
    }
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <vTaskPlaceOnEventListRestricted+0x54>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3318      	adds	r3, #24
 800330a:	4619      	mov	r1, r3
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fe fef4 	bl	80020fa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800331c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68b8      	ldr	r0, [r7, #8]
 8003322:	f000 fa3b 	bl	800379c <prvAddCurrentTaskToDelayedList>
    }
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000120 	.word	0x20000120

08003334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60fb      	str	r3, [r7, #12]
    }
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3318      	adds	r3, #24
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ff25 	bl	80021b4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <xTaskRemoveFromEventList+0xac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11c      	bne.n	80033ac <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3304      	adds	r3, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ff1c 	bl	80021b4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <xTaskRemoveFromEventList+0xb0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <xTaskRemoveFromEventList+0xb0>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <xTaskRemoveFromEventList+0xb4>)
 800339c:	441a      	add	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fe fea8 	bl	80020fa <vListInsertEnd>
 80033aa:	e005      	b.n	80033b8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	3318      	adds	r3, #24
 80033b0:	4619      	mov	r1, r3
 80033b2:	480e      	ldr	r0, [pc, #56]	; (80033ec <xTaskRemoveFromEventList+0xb8>)
 80033b4:	f7fe fea1 	bl	80020fa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <xTaskRemoveFromEventList+0xbc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d905      	bls.n	80033d2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <xTaskRemoveFromEventList+0xc0>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e001      	b.n	80033d6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80033d6:	697b      	ldr	r3, [r7, #20]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000220 	.word	0x20000220
 80033e4:	20000200 	.word	0x20000200
 80033e8:	20000124 	.word	0x20000124
 80033ec:	200001b8 	.word	0x200001b8
 80033f0:	20000120 	.word	0x20000120
 80033f4:	2000020c 	.word	0x2000020c

080033f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <vTaskInternalSetTimeOutState+0x24>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <vTaskInternalSetTimeOutState+0x28>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20000210 	.word	0x20000210
 8003420:	200001fc 	.word	0x200001fc

08003424 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	613b      	str	r3, [r7, #16]
    }
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
    }
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003466:	f000 fe3f 	bl	80040e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <xTaskCheckForTimeOut+0xc4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003482:	d102      	bne.n	800348a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e026      	b.n	80034d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <xTaskCheckForTimeOut+0xc8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d00a      	beq.n	80034ac <xTaskCheckForTimeOut+0x88>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	429a      	cmp	r2, r3
 800349e:	d305      	bcc.n	80034ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e015      	b.n	80034d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20b      	bcs.n	80034ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad2      	subs	r2, r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff98 	bl	80033f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e004      	b.n	80034d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034d8:	f000 fe36 	bl	8004148 <vPortExitCritical>

    return xReturn;
 80034dc:	69fb      	ldr	r3, [r7, #28]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200001fc 	.word	0x200001fc
 80034ec:	20000210 	.word	0x20000210

080034f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <vTaskMissedYield+0x14>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	2000020c 	.word	0x2000020c

08003508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003510:	f000 f852 	bl	80035b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <prvIdleTask+0x28>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d9f9      	bls.n	8003510 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <prvIdleTask+0x2c>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800352c:	e7f0      	b.n	8003510 <prvIdleTask+0x8>
 800352e:	bf00      	nop
 8003530:	20000124 	.word	0x20000124
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	e00c      	b.n	800355e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <prvInitialiseTaskLists+0x60>)
 8003550:	4413      	add	r3, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fda4 	bl	80020a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3301      	adds	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d9ef      	bls.n	8003544 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003564:	480d      	ldr	r0, [pc, #52]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003566:	f7fe fd9b 	bl	80020a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800356a:	480d      	ldr	r0, [pc, #52]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800356c:	f7fe fd98 	bl	80020a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <prvInitialiseTaskLists+0x6c>)
 8003572:	f7fe fd95 	bl	80020a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <prvInitialiseTaskLists+0x70>)
 8003578:	f7fe fd92 	bl	80020a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <prvInitialiseTaskLists+0x74>)
 800357e:	f7fe fd8f 	bl	80020a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <prvInitialiseTaskLists+0x78>)
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003586:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvInitialiseTaskLists+0x7c>)
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000124 	.word	0x20000124
 800359c:	20000188 	.word	0x20000188
 80035a0:	2000019c 	.word	0x2000019c
 80035a4:	200001b8 	.word	0x200001b8
 80035a8:	200001cc 	.word	0x200001cc
 80035ac:	200001e4 	.word	0x200001e4
 80035b0:	200001b0 	.word	0x200001b0
 80035b4:	200001b4 	.word	0x200001b4

080035b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035be:	e019      	b.n	80035f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035c0:	f000 fd92 	bl	80040e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <prvCheckTasksWaitingTermination+0x50>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fdef 	bl	80021b4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4a0b      	ldr	r2, [pc, #44]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80035ea:	f000 fdad 	bl	8004148 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f810 	bl	8003614 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e1      	bne.n	80035c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001cc 	.word	0x200001cc
 800360c:	200001f8 	.word	0x200001f8
 8003610:	200001e0 	.word	0x200001e0

08003614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	4618      	mov	r0, r3
 8003622:	f000 ff63 	bl	80044ec <vPortFree>
                vPortFree( pxTCB );
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 ff60 	bl	80044ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <prvResetNextTaskUnblockTime+0x30>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <prvResetNextTaskUnblockTime+0x34>)
 8003644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003648:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800364a:	e005      	b.n	8003658 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <prvResetNextTaskUnblockTime+0x30>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <prvResetNextTaskUnblockTime+0x34>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	200001b0 	.word	0x200001b0
 8003668:	20000218 	.word	0x20000218

0800366c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <xTaskGetSchedulerState+0x34>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800367a:	2301      	movs	r3, #1
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e008      	b.n	8003692 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <xTaskGetSchedulerState+0x38>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003688:	2302      	movs	r3, #2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003692:	687b      	ldr	r3, [r7, #4]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20000204 	.word	0x20000204
 80036a4:	20000220 	.word	0x20000220

080036a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <xTaskPriorityDisinherit+0xe8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d00a      	beq.n	80036de <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	60fb      	str	r3, [r7, #12]
    }
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
    }
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370e:	429a      	cmp	r2, r3
 8003710:	d039      	beq.n	8003786 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d135      	bne.n	8003786 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3304      	adds	r3, #4
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fd48 	bl	80021b4 <uxListRemove>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43da      	mvns	r2, r3
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <xTaskPriorityDisinherit+0xec>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4013      	ands	r3, r2
 800373c:	4a15      	ldr	r2, [pc, #84]	; (8003794 <xTaskPriorityDisinherit+0xec>)
 800373e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f1c3 0205 	rsb	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2201      	movs	r2, #1
 800375a:	409a      	lsls	r2, r3
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <xTaskPriorityDisinherit+0xec>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4313      	orrs	r3, r2
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <xTaskPriorityDisinherit+0xec>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <xTaskPriorityDisinherit+0xf0>)
 8003774:	441a      	add	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe fcbc 	bl	80020fa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003786:	697b      	ldr	r3, [r7, #20]
    }
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000120 	.word	0x20000120
 8003794:	20000200 	.word	0x20000200
 8003798:	20000124 	.word	0x20000124

0800379c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <prvAddCurrentTaskToDelayedList+0xb0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fcfe 	bl	80021b4 <uxListRemove>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4013      	ands	r3, r2
 80037d2:	4a20      	ldr	r2, [pc, #128]	; (8003854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d10a      	bne.n	80037f4 <prvAddCurrentTaskToDelayedList+0x58>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	481a      	ldr	r0, [pc, #104]	; (8003858 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037ee:	f7fe fc84 	bl	80020fa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037f2:	e026      	b.n	8003842 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d209      	bcs.n	8003820 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <prvAddCurrentTaskToDelayedList+0xc0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7fe fc92 	bl	8002142 <vListInsert>
}
 800381e:	e010      	b.n	8003842 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe fc88 	bl	8002142 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d202      	bcs.n	8003842 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <prvAddCurrentTaskToDelayedList+0xc8>)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6013      	str	r3, [r2, #0]
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200001fc 	.word	0x200001fc
 8003850:	20000120 	.word	0x20000120
 8003854:	20000200 	.word	0x20000200
 8003858:	200001e4 	.word	0x200001e4
 800385c:	200001b4 	.word	0x200001b4
 8003860:	200001b0 	.word	0x200001b0
 8003864:	20000218 	.word	0x20000218

08003868 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003872:	f000 fad5 	bl	8003e20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <xTimerCreateTimerTask+0x54>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <xTimerCreateTimerTask+0x58>)
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	2302      	movs	r3, #2
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800388c:	490d      	ldr	r1, [pc, #52]	; (80038c4 <xTimerCreateTimerTask+0x5c>)
 800388e:	480e      	ldr	r0, [pc, #56]	; (80038c8 <xTimerCreateTimerTask+0x60>)
 8003890:	f7ff f99a 	bl	8002bc8 <xTaskCreate>
 8003894:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	603b      	str	r3, [r7, #0]
    }
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038b2:	687b      	ldr	r3, [r7, #4]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000254 	.word	0x20000254
 80038c0:	20000258 	.word	0x20000258
 80038c4:	08005214 	.word	0x08005214
 80038c8:	08003a01 	.word	0x08003a01

080038cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xTimerGenericCommand+0x2e>
        __asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	623b      	str	r3, [r7, #32]
    }
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <xTimerGenericCommand+0x98>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02a      	beq.n	8003958 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b05      	cmp	r3, #5
 8003912:	dc18      	bgt.n	8003946 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003914:	f7ff feaa 	bl	800366c <xTaskGetSchedulerState>
 8003918:	4603      	mov	r3, r0
 800391a:	2b02      	cmp	r3, #2
 800391c:	d109      	bne.n	8003932 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <xTimerGenericCommand+0x98>)
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	f107 0114 	add.w	r1, r7, #20
 8003926:	2300      	movs	r3, #0
 8003928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392a:	f7fe fd57 	bl	80023dc <xQueueGenericSend>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
 8003930:	e012      	b.n	8003958 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <xTimerGenericCommand+0x98>)
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f107 0114 	add.w	r1, r7, #20
 800393a:	2300      	movs	r3, #0
 800393c:	2200      	movs	r2, #0
 800393e:	f7fe fd4d 	bl	80023dc <xQueueGenericSend>
 8003942:	6278      	str	r0, [r7, #36]	; 0x24
 8003944:	e008      	b.n	8003958 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <xTimerGenericCommand+0x98>)
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f107 0114 	add.w	r1, r7, #20
 800394e:	2300      	movs	r3, #0
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	f7fe fe41 	bl	80025d8 <xQueueGenericSendFromISR>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800395a:	4618      	mov	r0, r3
 800395c:	3728      	adds	r7, #40	; 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000254 	.word	0x20000254

08003968 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af02      	add	r7, sp, #8
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <prvProcessExpiredTimer+0x94>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fc17 	bl	80021b4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d022      	beq.n	80039da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	18d1      	adds	r1, r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6978      	ldr	r0, [r7, #20]
 80039a2:	f000 f8d1 	bl	8003b48 <prvInsertTimerInActiveList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01f      	beq.n	80039ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039ac:	2300      	movs	r3, #0
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2300      	movs	r3, #0
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	2100      	movs	r1, #0
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f7ff ff88 	bl	80038cc <xTimerGenericCommand>
 80039bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d113      	bne.n	80039ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	60fb      	str	r3, [r7, #12]
    }
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	4798      	blx	r3
    }
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000024c 	.word	0x2000024c

08003a00 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f857 	bl	8003ac0 <prvGetNextExpireTime>
 8003a12:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4619      	mov	r1, r3
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f803 	bl	8003a24 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a1e:	f000 f8d5 	bl	8003bcc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a22:	e7f1      	b.n	8003a08 <prvTimerTask+0x8>

08003a24 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a2e:	f7ff fa63 	bl	8002ef8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f866 	bl	8003b08 <prvSampleTimeNow>
 8003a3c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d130      	bne.n	8003aa6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <prvProcessTimerOrBlockTask+0x3c>
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d806      	bhi.n	8003a60 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a52:	f7ff fa5f 	bl	8002f14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff85 	bl	8003968 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a5e:	e024      	b.n	8003aaa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <prvProcessTimerOrBlockTask+0x90>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <prvProcessTimerOrBlockTask+0x50>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <prvProcessTimerOrBlockTask+0x52>
 8003a74:	2300      	movs	r3, #0
 8003a76:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <prvProcessTimerOrBlockTask+0x94>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f7ff f86b 	bl	8002b60 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a8a:	f7ff fa43 	bl	8002f14 <xTaskResumeAll>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <prvProcessTimerOrBlockTask+0x98>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
    }
 8003aa4:	e001      	b.n	8003aaa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003aa6:	f7ff fa35 	bl	8002f14 <xTaskResumeAll>
    }
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000250 	.word	0x20000250
 8003ab8:	20000254 	.word	0x20000254
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <prvGetNextExpireTime+0x44>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <prvGetNextExpireTime+0x16>
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	e000      	b.n	8003ad8 <prvGetNextExpireTime+0x18>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <prvGetNextExpireTime+0x44>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e001      	b.n	8003af4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003af4:	68fb      	ldr	r3, [r7, #12]
    }
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2000024c 	.word	0x2000024c

08003b08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b10:	f7ff fa9c 	bl	800304c <xTaskGetTickCount>
 8003b14:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <prvSampleTimeNow+0x3c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d205      	bcs.n	8003b2c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b20:	f000 f91a 	bl	8003d58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b32:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <prvSampleTimeNow+0x3c>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b38:	68fb      	ldr	r3, [r7, #12]
    }
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2000025c 	.word	0x2000025c

08003b48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d812      	bhi.n	8003b94 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e01b      	b.n	8003bba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <prvInsertTimerInActiveList+0x7c>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fe fad8 	bl	8002142 <vListInsert>
 8003b92:	e012      	b.n	8003bba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d206      	bcs.n	8003baa <prvInsertTimerInActiveList+0x62>
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e007      	b.n	8003bba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <prvInsertTimerInActiveList+0x80>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fe fac4 	bl	8002142 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003bba:	697b      	ldr	r3, [r7, #20]
    }
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000250 	.word	0x20000250
 8003bc8:	2000024c 	.word	0x2000024c

08003bcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bd2:	e0ae      	b.n	8003d32 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f2c0 80aa 	blt.w	8003d30 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fae1 	bl	80021b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff87 	bl	8003b08 <prvSampleTimeNow>
 8003bfa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	f200 8097 	bhi.w	8003d32 <prvProcessReceivedCommands+0x166>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <prvProcessReceivedCommands+0x40>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c35 	.word	0x08003c35
 8003c18:	08003ca9 	.word	0x08003ca9
 8003c1c:	08003cbd 	.word	0x08003cbd
 8003c20:	08003d07 	.word	0x08003d07
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c35 	.word	0x08003c35
 8003c2c:	08003ca9 	.word	0x08003ca9
 8003c30:	08003cbd 	.word	0x08003cbd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	18d1      	adds	r1, r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a3a      	ldr	r2, [r7, #32]
 8003c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c54:	f7ff ff78 	bl	8003b48 <prvInsertTimerInActiveList>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d069      	beq.n	8003d32 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c64:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05e      	beq.n	8003d32 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c86:	f7ff fe21 	bl	80038cc <xTimerGenericCommand>
 8003c8a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d14f      	bne.n	8003d32 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61bb      	str	r3, [r7, #24]
    }
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003cba:	e03a      	b.n	8003d32 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	617b      	str	r3, [r7, #20]
    }
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	18d1      	adds	r1, r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d00:	f7ff ff22 	bl	8003b48 <prvInsertTimerInActiveList>
                        break;
 8003d04:	e015      	b.n	8003d32 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d16:	f000 fbe9 	bl	80044ec <vPortFree>
 8003d1a:	e00a      	b.n	8003d32 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d2e:	e000      	b.n	8003d32 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <prvProcessReceivedCommands+0x188>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f107 0108 	add.w	r1, r7, #8
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe fcf5 	bl	800272c <xQueueReceive>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af45 	bne.w	8003bd4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000254 	.word	0x20000254

08003d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d5e:	e048      	b.n	8003df2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fa1b 	bl	80021b4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02e      	beq.n	8003df2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90e      	bls.n	8003dc4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe f9c0 	bl	8002142 <vListInsert>
 8003dc2:	e016      	b.n	8003df2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fd7c 	bl	80038cc <xTimerGenericCommand>
 8003dd4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	603b      	str	r3, [r7, #0]
    }
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1b1      	bne.n	8003d60 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <prvSwitchTimerLists+0xc4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <prvSwitchTimerLists+0xc0>)
 8003e08:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <prvSwitchTimerLists+0xc4>)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6013      	str	r3, [r2, #0]
    }
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	2000024c 	.word	0x2000024c
 8003e1c:	20000250 	.word	0x20000250

08003e20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e24:	f000 f960 	bl	80040e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <prvCheckForValidListAndQueue+0x54>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e30:	4811      	ldr	r0, [pc, #68]	; (8003e78 <prvCheckForValidListAndQueue+0x58>)
 8003e32:	f7fe f935 	bl	80020a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e36:	4811      	ldr	r0, [pc, #68]	; (8003e7c <prvCheckForValidListAndQueue+0x5c>)
 8003e38:	f7fe f932 	bl	80020a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <prvCheckForValidListAndQueue+0x60>)
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <prvCheckForValidListAndQueue+0x58>)
 8003e40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <prvCheckForValidListAndQueue+0x64>)
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <prvCheckForValidListAndQueue+0x5c>)
 8003e46:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e48:	2200      	movs	r2, #0
 8003e4a:	210c      	movs	r1, #12
 8003e4c:	200a      	movs	r0, #10
 8003e4e:	f7fe fa43 	bl	80022d8 <xQueueGenericCreate>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <prvCheckForValidListAndQueue+0x54>)
 8003e56:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <prvCheckForValidListAndQueue+0x54>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <prvCheckForValidListAndQueue+0x54>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4908      	ldr	r1, [pc, #32]	; (8003e88 <prvCheckForValidListAndQueue+0x68>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fe50 	bl	8002b0c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e6c:	f000 f96c 	bl	8004148 <vPortExitCritical>
    }
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000254 	.word	0x20000254
 8003e78:	20000224 	.word	0x20000224
 8003e7c:	20000238 	.word	0x20000238
 8003e80:	2000024c 	.word	0x2000024c
 8003e84:	20000250 	.word	0x20000250
 8003e88:	0800521c 	.word	0x0800521c

08003e8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f023 0201 	bic.w	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <pxPortInitialiseStack+0x64>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b14      	subs	r3, #20
 8003ec6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f06f 0202 	mvn.w	r2, #2
 8003eda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3b20      	subs	r3, #32
 8003ee0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	08003ef5 	.word	0x08003ef5

08003ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <prvTaskExitError+0x54>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f06:	d00a      	beq.n	8003f1e <prvTaskExitError+0x2a>
        __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
    }
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <prvTaskExitError+0x28>
        __asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
    }
 8003f30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f32:	bf00      	nop
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0fc      	beq.n	8003f34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000010 	.word	0x20000010
 8003f4c:	00000000 	.word	0x00000000

08003f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst2>:
 8003f70:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <prvPortStartFirstTask+0x24>)
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f380 8808 	msr	MSP, r0
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8814 	msr	CONTROL, r0
 8003f8a:	b662      	cpsie	i
 8003f8c:	b661      	cpsie	f
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	df00      	svc	0
 8003f98:	bf00      	nop
 8003f9a:	0000      	.short	0x0000
 8003f9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop

08003fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <xPortStartScheduler+0x120>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a46      	ldr	r2, [pc, #280]	; (80040c8 <xPortStartScheduler+0x124>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10a      	bne.n	8003fca <xPortStartScheduler+0x26>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	613b      	str	r3, [r7, #16]
    }
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <xPortStartScheduler+0x120>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <xPortStartScheduler+0x128>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10a      	bne.n	8003fea <xPortStartScheduler+0x46>
        __asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
    }
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <xPortStartScheduler+0x12c>)
 8003fec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <xPortStartScheduler+0x130>)
 8004010:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <xPortStartScheduler+0x134>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004018:	e009      	b.n	800402e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <xPortStartScheduler+0x134>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3b01      	subs	r3, #1
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <xPortStartScheduler+0x134>)
 8004022:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d0ef      	beq.n	800401a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800403a:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <xPortStartScheduler+0x134>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	d00a      	beq.n	800405c <xPortStartScheduler+0xb8>
        __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60bb      	str	r3, [r7, #8]
    }
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <xPortStartScheduler+0x134>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <xPortStartScheduler+0x134>)
 8004064:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <xPortStartScheduler+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406e:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <xPortStartScheduler+0x134>)
 8004070:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <xPortStartScheduler+0x138>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <xPortStartScheduler+0x138>)
 8004080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004084:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <xPortStartScheduler+0x138>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a14      	ldr	r2, [pc, #80]	; (80040dc <xPortStartScheduler+0x138>)
 800408c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004092:	f000 f8db 	bl	800424c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <xPortStartScheduler+0x13c>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800409c:	f000 f8fa 	bl	8004294 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <xPortStartScheduler+0x140>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <xPortStartScheduler+0x140>)
 80040a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040ac:	f7ff ff64 	bl	8003f78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040b0:	f7ff f894 	bl	80031dc <vTaskSwitchContext>
    prvTaskExitError();
 80040b4:	f7ff ff1e 	bl	8003ef4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	e000ed00 	.word	0xe000ed00
 80040c8:	410fc271 	.word	0x410fc271
 80040cc:	410fc270 	.word	0x410fc270
 80040d0:	e000e400 	.word	0xe000e400
 80040d4:	20000260 	.word	0x20000260
 80040d8:	20000264 	.word	0x20000264
 80040dc:	e000ed20 	.word	0xe000ed20
 80040e0:	20000010 	.word	0x20000010
 80040e4:	e000ef34 	.word	0xe000ef34

080040e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
    }
 8004100:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <vPortEnterCritical+0x58>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <vPortEnterCritical+0x58>)
 800410a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <vPortEnterCritical+0x58>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10f      	bne.n	8004134 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <vPortEnterCritical+0x5c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <vPortEnterCritical+0x4c>
        __asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	603b      	str	r3, [r7, #0]
    }
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <vPortEnterCritical+0x4a>
    }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	20000010 	.word	0x20000010
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <vPortExitCritical+0x50>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <vPortExitCritical+0x24>
        __asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	607b      	str	r3, [r7, #4]
    }
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vPortExitCritical+0x50>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <vPortExitCritical+0x50>)
 8004174:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <vPortExitCritical+0x50>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <vPortExitCritical+0x42>
 800417e:	2300      	movs	r3, #0
 8004180:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f383 8811 	msr	BASEPRI, r3
    }
 8004188:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000010 	.word	0x20000010
 800419c:	00000000 	.word	0x00000000

080041a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f01e 0f10 	tst.w	lr, #16
 80041b0:	bf08      	it	eq
 80041b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041c4:	f380 8811 	msr	BASEPRI, r0
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f7ff f804 	bl	80031dc <vTaskSwitchContext>
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f380 8811 	msr	BASEPRI, r0
 80041dc:	bc09      	pop	{r0, r3}
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e6:	f01e 0f10 	tst.w	lr, #16
 80041ea:	bf08      	it	eq
 80041ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041f0:	f380 8809 	msr	PSP, r0
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst>:
 8004200:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
        __asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
    }
 8004220:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004222:	f7fe ff23 	bl	800306c <xTaskIncrementTick>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <SysTick_Handler+0x40>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f383 8811 	msr	BASEPRI, r3
    }
 800423e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vPortSetupTimerInterrupt+0x38>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <vPortSetupTimerInterrupt+0x3c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <vPortSetupTimerInterrupt+0x40>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <vPortSetupTimerInterrupt+0x44>)
 800426a:	3b01      	subs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010
 8004284:	e000e018 	.word	0xe000e018
 8004288:	20000000 	.word	0x20000000
 800428c:	10624dd3 	.word	0x10624dd3
 8004290:	e000e014 	.word	0xe000e014

08004294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042a4 <vPortEnableVFP+0x10>
 8004298:	6801      	ldr	r1, [r0, #0]
 800429a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800429e:	6001      	str	r1, [r0, #0]
 80042a0:	4770      	bx	lr
 80042a2:	0000      	.short	0x0000
 80042a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop

080042ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042b2:	f3ef 8305 	mrs	r3, IPSR
 80042b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	d914      	bls.n	80042e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <vPortValidateInterruptPriority+0x70>)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <vPortValidateInterruptPriority+0x74>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	7afa      	ldrb	r2, [r7, #11]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d20a      	bcs.n	80042e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
    }
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <vPortValidateInterruptPriority+0x78>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042f0:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <vPortValidateInterruptPriority+0x7c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d90a      	bls.n	800430e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	603b      	str	r3, [r7, #0]
    }
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <vPortValidateInterruptPriority+0x60>
    }
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e3f0 	.word	0xe000e3f0
 8004320:	20000260 	.word	0x20000260
 8004324:	e000ed0c 	.word	0xe000ed0c
 8004328:	20000264 	.word	0x20000264

0800432c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004338:	f7fe fdde 	bl	8002ef8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800433c:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <pvPortMalloc+0x1a8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004344:	f000 f934 	bl	80045b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004348:	4b63      	ldr	r3, [pc, #396]	; (80044d8 <pvPortMalloc+0x1ac>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 80a7 	bne.w	80044a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02d      	beq.n	80043b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800435c:	2208      	movs	r2, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d227      	bcs.n	80043b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004368:	2208      	movs	r2, #8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	2b00      	cmp	r3, #0
 8004378:	d021      	beq.n	80043be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f023 0307 	bic.w	r3, r3, #7
 8004380:	3308      	adds	r3, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d214      	bcs.n	80043b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	3308      	adds	r3, #8
 8004390:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <pvPortMalloc+0x92>
        __asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	617b      	str	r3, [r7, #20]
    }
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b6:	e002      	b.n	80043be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e000      	b.n	80043c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06e      	beq.n	80044a4 <pvPortMalloc+0x178>
 80043c6:	4b45      	ldr	r3, [pc, #276]	; (80044dc <pvPortMalloc+0x1b0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d869      	bhi.n	80044a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <pvPortMalloc+0x1b4>)
 80043d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043d4:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <pvPortMalloc+0x1b4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043da:	e004      	b.n	80043e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d903      	bls.n	80043f8 <pvPortMalloc+0xcc>
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f1      	bne.n	80043dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043f8:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <pvPortMalloc+0x1a8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	429a      	cmp	r2, r3
 8004400:	d050      	beq.n	80044a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2208      	movs	r2, #8
 8004408:	4413      	add	r3, r2
 800440a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	1ad2      	subs	r2, r2, r3
 800441c:	2308      	movs	r3, #8
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	429a      	cmp	r2, r3
 8004422:	d91f      	bls.n	8004464 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <pvPortMalloc+0x120>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	613b      	str	r3, [r7, #16]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1ad2      	subs	r2, r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800445e:	69b8      	ldr	r0, [r7, #24]
 8004460:	f000 f908 	bl	8004674 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <pvPortMalloc+0x1b0>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <pvPortMalloc+0x1b0>)
 8004470:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <pvPortMalloc+0x1b0>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <pvPortMalloc+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d203      	bcs.n	8004486 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <pvPortMalloc+0x1b0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <pvPortMalloc+0x1b8>)
 8004484:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <pvPortMalloc+0x1ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	431a      	orrs	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <pvPortMalloc+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <pvPortMalloc+0x1bc>)
 80044a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044a4:	f7fe fd36 	bl	8002f14 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <pvPortMalloc+0x19c>
        __asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
    }
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80044c8:	69fb      	ldr	r3, [r7, #28]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20012e70 	.word	0x20012e70
 80044d8:	20012e84 	.word	0x20012e84
 80044dc:	20012e74 	.word	0x20012e74
 80044e0:	20012e68 	.word	0x20012e68
 80044e4:	20012e78 	.word	0x20012e78
 80044e8:	20012e7c 	.word	0x20012e7c

080044ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04d      	beq.n	800459a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044fe:	2308      	movs	r3, #8
 8004500:	425b      	negs	r3, r3
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <vPortFree+0xb8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <vPortFree+0x44>
        __asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60fb      	str	r3, [r7, #12]
    }
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <vPortFree+0x62>
        __asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60bb      	str	r3, [r7, #8]
    }
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <vPortFree+0xb8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01e      	beq.n	800459a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11a      	bne.n	800459a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <vPortFree+0xb8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004574:	f7fe fcc0 	bl	8002ef8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <vPortFree+0xbc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4413      	add	r3, r2
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <vPortFree+0xbc>)
 8004584:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f000 f874 	bl	8004674 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <vPortFree+0xc0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a06      	ldr	r2, [pc, #24]	; (80045ac <vPortFree+0xc0>)
 8004594:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004596:	f7fe fcbd 	bl	8002f14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20012e84 	.word	0x20012e84
 80045a8:	20012e74 	.word	0x20012e74
 80045ac:	20012e80 	.word	0x20012e80

080045b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80045ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <prvHeapInit+0xac>)
 80045be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3307      	adds	r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0307 	bic.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <prvHeapInit+0xac>)
 80045e0:	4413      	add	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <prvHeapInit+0xb0>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <prvHeapInit+0xb0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4413      	add	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045fc:	2208      	movs	r2, #8
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <prvHeapInit+0xb4>)
 8004610:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <prvHeapInit+0xb4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <prvHeapInit+0xb4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004630:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <prvHeapInit+0xb4>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <prvHeapInit+0xb8>)
 800463e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <prvHeapInit+0xbc>)
 8004646:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <prvHeapInit+0xc0>)
 800464a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000268 	.word	0x20000268
 8004660:	20012e68 	.word	0x20012e68
 8004664:	20012e70 	.word	0x20012e70
 8004668:	20012e78 	.word	0x20012e78
 800466c:	20012e74 	.word	0x20012e74
 8004670:	20012e84 	.word	0x20012e84

08004674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <prvInsertBlockIntoFreeList+0xac>)
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e002      	b.n	8004688 <prvInsertBlockIntoFreeList+0x14>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d8f7      	bhi.n	8004682 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d108      	bne.n	80046b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d118      	bne.n	80046fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b15      	ldr	r3, [pc, #84]	; (8004724 <prvInsertBlockIntoFreeList+0xb0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d00d      	beq.n	80046f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e008      	b.n	8004704 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <prvInsertBlockIntoFreeList+0xb0>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e003      	b.n	8004704 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d002      	beq.n	8004712 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20012e68 	.word	0x20012e68
 8004724:	20012e70 	.word	0x20012e70

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4d0d      	ldr	r5, [pc, #52]	; (8004760 <__libc_init_array+0x38>)
 800472c:	4c0d      	ldr	r4, [pc, #52]	; (8004764 <__libc_init_array+0x3c>)
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	10a4      	asrs	r4, r4, #2
 8004732:	2600      	movs	r6, #0
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	4d0b      	ldr	r5, [pc, #44]	; (8004768 <__libc_init_array+0x40>)
 800473a:	4c0c      	ldr	r4, [pc, #48]	; (800476c <__libc_init_array+0x44>)
 800473c:	f000 fd3a 	bl	80051b4 <_init>
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	2600      	movs	r6, #0
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	080052a8 	.word	0x080052a8
 8004764:	080052a8 	.word	0x080052a8
 8004768:	080052a8 	.word	0x080052a8
 800476c:	080052ac 	.word	0x080052ac

08004770 <memcpy>:
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004778:	d100      	bne.n	800477c <memcpy+0xc>
 800477a:	4770      	bx	lr
 800477c:	b510      	push	{r4, lr}
 800477e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004786:	4291      	cmp	r1, r2
 8004788:	d1f9      	bne.n	800477e <memcpy+0xe>
 800478a:	bd10      	pop	{r4, pc}

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_puts_r>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	460e      	mov	r6, r1
 80047a0:	4605      	mov	r5, r0
 80047a2:	b118      	cbz	r0, 80047ac <_puts_r+0x10>
 80047a4:	6983      	ldr	r3, [r0, #24]
 80047a6:	b90b      	cbnz	r3, 80047ac <_puts_r+0x10>
 80047a8:	f000 fa48 	bl	8004c3c <__sinit>
 80047ac:	69ab      	ldr	r3, [r5, #24]
 80047ae:	68ac      	ldr	r4, [r5, #8]
 80047b0:	b913      	cbnz	r3, 80047b8 <_puts_r+0x1c>
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fa42 	bl	8004c3c <__sinit>
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <_puts_r+0xd0>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d120      	bne.n	8004800 <_puts_r+0x64>
 80047be:	686c      	ldr	r4, [r5, #4]
 80047c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x36>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0598      	lsls	r0, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x36>
 80047cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ce:	f000 fad3 	bl	8004d78 <__retarget_lock_acquire_recursive>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0719      	lsls	r1, r3, #28
 80047d6:	d51d      	bpl.n	8004814 <_puts_r+0x78>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b1db      	cbz	r3, 8004814 <_puts_r+0x78>
 80047dc:	3e01      	subs	r6, #1
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	bb39      	cbnz	r1, 800483a <_puts_r+0x9e>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da38      	bge.n	8004860 <_puts_r+0xc4>
 80047ee:	4622      	mov	r2, r4
 80047f0:	210a      	movs	r1, #10
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f848 	bl	8004888 <__swbuf_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d011      	beq.n	8004820 <_puts_r+0x84>
 80047fc:	250a      	movs	r5, #10
 80047fe:	e011      	b.n	8004824 <_puts_r+0x88>
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <_puts_r+0xd4>)
 8004802:	429c      	cmp	r4, r3
 8004804:	d101      	bne.n	800480a <_puts_r+0x6e>
 8004806:	68ac      	ldr	r4, [r5, #8]
 8004808:	e7da      	b.n	80047c0 <_puts_r+0x24>
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <_puts_r+0xd8>)
 800480c:	429c      	cmp	r4, r3
 800480e:	bf08      	it	eq
 8004810:	68ec      	ldreq	r4, [r5, #12]
 8004812:	e7d5      	b.n	80047c0 <_puts_r+0x24>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f888 	bl	800492c <__swsetup_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0dd      	beq.n	80047dc <_puts_r+0x40>
 8004820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d405      	bmi.n	8004836 <_puts_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	d402      	bmi.n	8004836 <_puts_r+0x9a>
 8004830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004832:	f000 faa2 	bl	8004d7a <__retarget_lock_release_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	2b00      	cmp	r3, #0
 800483c:	da04      	bge.n	8004848 <_puts_r+0xac>
 800483e:	69a2      	ldr	r2, [r4, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	dc06      	bgt.n	8004852 <_puts_r+0xb6>
 8004844:	290a      	cmp	r1, #10
 8004846:	d004      	beq.n	8004852 <_puts_r+0xb6>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	7019      	strb	r1, [r3, #0]
 8004850:	e7c5      	b.n	80047de <_puts_r+0x42>
 8004852:	4622      	mov	r2, r4
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f817 	bl	8004888 <__swbuf_r>
 800485a:	3001      	adds	r0, #1
 800485c:	d1bf      	bne.n	80047de <_puts_r+0x42>
 800485e:	e7df      	b.n	8004820 <_puts_r+0x84>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	250a      	movs	r5, #10
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	701d      	strb	r5, [r3, #0]
 800486a:	e7db      	b.n	8004824 <_puts_r+0x88>
 800486c:	08005260 	.word	0x08005260
 8004870:	08005280 	.word	0x08005280
 8004874:	08005240 	.word	0x08005240

08004878 <puts>:
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <puts+0xc>)
 800487a:	4601      	mov	r1, r0
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	f7ff bf8d 	b.w	800479c <_puts_r>
 8004882:	bf00      	nop
 8004884:	20000014 	.word	0x20000014

08004888 <__swbuf_r>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	460e      	mov	r6, r1
 800488c:	4614      	mov	r4, r2
 800488e:	4605      	mov	r5, r0
 8004890:	b118      	cbz	r0, 800489a <__swbuf_r+0x12>
 8004892:	6983      	ldr	r3, [r0, #24]
 8004894:	b90b      	cbnz	r3, 800489a <__swbuf_r+0x12>
 8004896:	f000 f9d1 	bl	8004c3c <__sinit>
 800489a:	4b21      	ldr	r3, [pc, #132]	; (8004920 <__swbuf_r+0x98>)
 800489c:	429c      	cmp	r4, r3
 800489e:	d12b      	bne.n	80048f8 <__swbuf_r+0x70>
 80048a0:	686c      	ldr	r4, [r5, #4]
 80048a2:	69a3      	ldr	r3, [r4, #24]
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	071a      	lsls	r2, r3, #28
 80048aa:	d52f      	bpl.n	800490c <__swbuf_r+0x84>
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	b36b      	cbz	r3, 800490c <__swbuf_r+0x84>
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	6820      	ldr	r0, [r4, #0]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6963      	ldr	r3, [r4, #20]
 80048b8:	b2f6      	uxtb	r6, r6
 80048ba:	4283      	cmp	r3, r0
 80048bc:	4637      	mov	r7, r6
 80048be:	dc04      	bgt.n	80048ca <__swbuf_r+0x42>
 80048c0:	4621      	mov	r1, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 f926 	bl	8004b14 <_fflush_r>
 80048c8:	bb30      	cbnz	r0, 8004918 <__swbuf_r+0x90>
 80048ca:	68a3      	ldr	r3, [r4, #8]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60a3      	str	r3, [r4, #8]
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	701e      	strb	r6, [r3, #0]
 80048d8:	6963      	ldr	r3, [r4, #20]
 80048da:	3001      	adds	r0, #1
 80048dc:	4283      	cmp	r3, r0
 80048de:	d004      	beq.n	80048ea <__swbuf_r+0x62>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	07db      	lsls	r3, r3, #31
 80048e4:	d506      	bpl.n	80048f4 <__swbuf_r+0x6c>
 80048e6:	2e0a      	cmp	r6, #10
 80048e8:	d104      	bne.n	80048f4 <__swbuf_r+0x6c>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f911 	bl	8004b14 <_fflush_r>
 80048f2:	b988      	cbnz	r0, 8004918 <__swbuf_r+0x90>
 80048f4:	4638      	mov	r0, r7
 80048f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <__swbuf_r+0x9c>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d101      	bne.n	8004902 <__swbuf_r+0x7a>
 80048fe:	68ac      	ldr	r4, [r5, #8]
 8004900:	e7cf      	b.n	80048a2 <__swbuf_r+0x1a>
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <__swbuf_r+0xa0>)
 8004904:	429c      	cmp	r4, r3
 8004906:	bf08      	it	eq
 8004908:	68ec      	ldreq	r4, [r5, #12]
 800490a:	e7ca      	b.n	80048a2 <__swbuf_r+0x1a>
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f80c 	bl	800492c <__swsetup_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	d0cb      	beq.n	80048b0 <__swbuf_r+0x28>
 8004918:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800491c:	e7ea      	b.n	80048f4 <__swbuf_r+0x6c>
 800491e:	bf00      	nop
 8004920:	08005260 	.word	0x08005260
 8004924:	08005280 	.word	0x08005280
 8004928:	08005240 	.word	0x08005240

0800492c <__swsetup_r>:
 800492c:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <__swsetup_r+0xcc>)
 800492e:	b570      	push	{r4, r5, r6, lr}
 8004930:	681d      	ldr	r5, [r3, #0]
 8004932:	4606      	mov	r6, r0
 8004934:	460c      	mov	r4, r1
 8004936:	b125      	cbz	r5, 8004942 <__swsetup_r+0x16>
 8004938:	69ab      	ldr	r3, [r5, #24]
 800493a:	b913      	cbnz	r3, 8004942 <__swsetup_r+0x16>
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f97d 	bl	8004c3c <__sinit>
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <__swsetup_r+0xd0>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d10f      	bne.n	8004968 <__swsetup_r+0x3c>
 8004948:	686c      	ldr	r4, [r5, #4]
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004950:	0719      	lsls	r1, r3, #28
 8004952:	d42c      	bmi.n	80049ae <__swsetup_r+0x82>
 8004954:	06dd      	lsls	r5, r3, #27
 8004956:	d411      	bmi.n	800497c <__swsetup_r+0x50>
 8004958:	2309      	movs	r3, #9
 800495a:	6033      	str	r3, [r6, #0]
 800495c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004960:	81a3      	strh	r3, [r4, #12]
 8004962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004966:	e03e      	b.n	80049e6 <__swsetup_r+0xba>
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <__swsetup_r+0xd4>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d101      	bne.n	8004972 <__swsetup_r+0x46>
 800496e:	68ac      	ldr	r4, [r5, #8]
 8004970:	e7eb      	b.n	800494a <__swsetup_r+0x1e>
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <__swsetup_r+0xd8>)
 8004974:	429c      	cmp	r4, r3
 8004976:	bf08      	it	eq
 8004978:	68ec      	ldreq	r4, [r5, #12]
 800497a:	e7e6      	b.n	800494a <__swsetup_r+0x1e>
 800497c:	0758      	lsls	r0, r3, #29
 800497e:	d512      	bpl.n	80049a6 <__swsetup_r+0x7a>
 8004980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004982:	b141      	cbz	r1, 8004996 <__swsetup_r+0x6a>
 8004984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004988:	4299      	cmp	r1, r3
 800498a:	d002      	beq.n	8004992 <__swsetup_r+0x66>
 800498c:	4630      	mov	r0, r6
 800498e:	f000 fa5b 	bl	8004e48 <_free_r>
 8004992:	2300      	movs	r3, #0
 8004994:	6363      	str	r3, [r4, #52]	; 0x34
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	2300      	movs	r3, #0
 80049a0:	6063      	str	r3, [r4, #4]
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	b94b      	cbnz	r3, 80049c6 <__swsetup_r+0x9a>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d003      	beq.n	80049c6 <__swsetup_r+0x9a>
 80049be:	4621      	mov	r1, r4
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 fa01 	bl	8004dc8 <__smakebuf_r>
 80049c6:	89a0      	ldrh	r0, [r4, #12]
 80049c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049cc:	f010 0301 	ands.w	r3, r0, #1
 80049d0:	d00a      	beq.n	80049e8 <__swsetup_r+0xbc>
 80049d2:	2300      	movs	r3, #0
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	6963      	ldr	r3, [r4, #20]
 80049d8:	425b      	negs	r3, r3
 80049da:	61a3      	str	r3, [r4, #24]
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	b943      	cbnz	r3, 80049f2 <__swsetup_r+0xc6>
 80049e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049e4:	d1ba      	bne.n	800495c <__swsetup_r+0x30>
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	0781      	lsls	r1, r0, #30
 80049ea:	bf58      	it	pl
 80049ec:	6963      	ldrpl	r3, [r4, #20]
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	e7f4      	b.n	80049dc <__swsetup_r+0xb0>
 80049f2:	2000      	movs	r0, #0
 80049f4:	e7f7      	b.n	80049e6 <__swsetup_r+0xba>
 80049f6:	bf00      	nop
 80049f8:	20000014 	.word	0x20000014
 80049fc:	08005260 	.word	0x08005260
 8004a00:	08005280 	.word	0x08005280
 8004a04:	08005240 	.word	0x08005240

08004a08 <__sflush_r>:
 8004a08:	898a      	ldrh	r2, [r1, #12]
 8004a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	4605      	mov	r5, r0
 8004a10:	0710      	lsls	r0, r2, #28
 8004a12:	460c      	mov	r4, r1
 8004a14:	d458      	bmi.n	8004ac8 <__sflush_r+0xc0>
 8004a16:	684b      	ldr	r3, [r1, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dc05      	bgt.n	8004a28 <__sflush_r+0x20>
 8004a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dc02      	bgt.n	8004a28 <__sflush_r+0x20>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2a:	2e00      	cmp	r6, #0
 8004a2c:	d0f9      	beq.n	8004a22 <__sflush_r+0x1a>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a34:	682f      	ldr	r7, [r5, #0]
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	d032      	beq.n	8004aa0 <__sflush_r+0x98>
 8004a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	075a      	lsls	r2, r3, #29
 8004a40:	d505      	bpl.n	8004a4e <__sflush_r+0x46>
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	1ac0      	subs	r0, r0, r3
 8004a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a48:	b10b      	cbz	r3, 8004a4e <__sflush_r+0x46>
 8004a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a4c:	1ac0      	subs	r0, r0, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	4602      	mov	r2, r0
 8004a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a54:	6a21      	ldr	r1, [r4, #32]
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b0      	blx	r6
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	d106      	bne.n	8004a6e <__sflush_r+0x66>
 8004a60:	6829      	ldr	r1, [r5, #0]
 8004a62:	291d      	cmp	r1, #29
 8004a64:	d82c      	bhi.n	8004ac0 <__sflush_r+0xb8>
 8004a66:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <__sflush_r+0x108>)
 8004a68:	40ca      	lsrs	r2, r1
 8004a6a:	07d6      	lsls	r6, r2, #31
 8004a6c:	d528      	bpl.n	8004ac0 <__sflush_r+0xb8>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	6062      	str	r2, [r4, #4]
 8004a72:	04d9      	lsls	r1, r3, #19
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	6022      	str	r2, [r4, #0]
 8004a78:	d504      	bpl.n	8004a84 <__sflush_r+0x7c>
 8004a7a:	1c42      	adds	r2, r0, #1
 8004a7c:	d101      	bne.n	8004a82 <__sflush_r+0x7a>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	b903      	cbnz	r3, 8004a84 <__sflush_r+0x7c>
 8004a82:	6560      	str	r0, [r4, #84]	; 0x54
 8004a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a86:	602f      	str	r7, [r5, #0]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d0ca      	beq.n	8004a22 <__sflush_r+0x1a>
 8004a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a90:	4299      	cmp	r1, r3
 8004a92:	d002      	beq.n	8004a9a <__sflush_r+0x92>
 8004a94:	4628      	mov	r0, r5
 8004a96:	f000 f9d7 	bl	8004e48 <_free_r>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a9e:	e7c1      	b.n	8004a24 <__sflush_r+0x1c>
 8004aa0:	6a21      	ldr	r1, [r4, #32]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b0      	blx	r6
 8004aa8:	1c41      	adds	r1, r0, #1
 8004aaa:	d1c7      	bne.n	8004a3c <__sflush_r+0x34>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0c4      	beq.n	8004a3c <__sflush_r+0x34>
 8004ab2:	2b1d      	cmp	r3, #29
 8004ab4:	d001      	beq.n	8004aba <__sflush_r+0xb2>
 8004ab6:	2b16      	cmp	r3, #22
 8004ab8:	d101      	bne.n	8004abe <__sflush_r+0xb6>
 8004aba:	602f      	str	r7, [r5, #0]
 8004abc:	e7b1      	b.n	8004a22 <__sflush_r+0x1a>
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	e7ad      	b.n	8004a24 <__sflush_r+0x1c>
 8004ac8:	690f      	ldr	r7, [r1, #16]
 8004aca:	2f00      	cmp	r7, #0
 8004acc:	d0a9      	beq.n	8004a22 <__sflush_r+0x1a>
 8004ace:	0793      	lsls	r3, r2, #30
 8004ad0:	680e      	ldr	r6, [r1, #0]
 8004ad2:	bf08      	it	eq
 8004ad4:	694b      	ldreq	r3, [r1, #20]
 8004ad6:	600f      	str	r7, [r1, #0]
 8004ad8:	bf18      	it	ne
 8004ada:	2300      	movne	r3, #0
 8004adc:	eba6 0807 	sub.w	r8, r6, r7
 8004ae0:	608b      	str	r3, [r1, #8]
 8004ae2:	f1b8 0f00 	cmp.w	r8, #0
 8004ae6:	dd9c      	ble.n	8004a22 <__sflush_r+0x1a>
 8004ae8:	6a21      	ldr	r1, [r4, #32]
 8004aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004aec:	4643      	mov	r3, r8
 8004aee:	463a      	mov	r2, r7
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b0      	blx	r6
 8004af4:	2800      	cmp	r0, #0
 8004af6:	dc06      	bgt.n	8004b06 <__sflush_r+0xfe>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b04:	e78e      	b.n	8004a24 <__sflush_r+0x1c>
 8004b06:	4407      	add	r7, r0
 8004b08:	eba8 0800 	sub.w	r8, r8, r0
 8004b0c:	e7e9      	b.n	8004ae2 <__sflush_r+0xda>
 8004b0e:	bf00      	nop
 8004b10:	20400001 	.word	0x20400001

08004b14 <_fflush_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	b913      	cbnz	r3, 8004b24 <_fflush_r+0x10>
 8004b1e:	2500      	movs	r5, #0
 8004b20:	4628      	mov	r0, r5
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	b118      	cbz	r0, 8004b2e <_fflush_r+0x1a>
 8004b26:	6983      	ldr	r3, [r0, #24]
 8004b28:	b90b      	cbnz	r3, 8004b2e <_fflush_r+0x1a>
 8004b2a:	f000 f887 	bl	8004c3c <__sinit>
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <_fflush_r+0x6c>)
 8004b30:	429c      	cmp	r4, r3
 8004b32:	d11b      	bne.n	8004b6c <_fflush_r+0x58>
 8004b34:	686c      	ldr	r4, [r5, #4]
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ef      	beq.n	8004b1e <_fflush_r+0xa>
 8004b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b40:	07d0      	lsls	r0, r2, #31
 8004b42:	d404      	bmi.n	8004b4e <_fflush_r+0x3a>
 8004b44:	0599      	lsls	r1, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_fflush_r+0x3a>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f000 f915 	bl	8004d78 <__retarget_lock_acquire_recursive>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7ff ff59 	bl	8004a08 <__sflush_r>
 8004b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b58:	07da      	lsls	r2, r3, #31
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	d4e0      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	d4dd      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f000 f908 	bl	8004d7a <__retarget_lock_release_recursive>
 8004b6a:	e7d9      	b.n	8004b20 <_fflush_r+0xc>
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <_fflush_r+0x70>)
 8004b6e:	429c      	cmp	r4, r3
 8004b70:	d101      	bne.n	8004b76 <_fflush_r+0x62>
 8004b72:	68ac      	ldr	r4, [r5, #8]
 8004b74:	e7df      	b.n	8004b36 <_fflush_r+0x22>
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <_fflush_r+0x74>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	bf08      	it	eq
 8004b7c:	68ec      	ldreq	r4, [r5, #12]
 8004b7e:	e7da      	b.n	8004b36 <_fflush_r+0x22>
 8004b80:	08005260 	.word	0x08005260
 8004b84:	08005280 	.word	0x08005280
 8004b88:	08005240 	.word	0x08005240

08004b8c <std>:
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	4604      	mov	r4, r0
 8004b92:	e9c0 3300 	strd	r3, r3, [r0]
 8004b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9a:	6083      	str	r3, [r0, #8]
 8004b9c:	8181      	strh	r1, [r0, #12]
 8004b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004ba0:	81c2      	strh	r2, [r0, #14]
 8004ba2:	6183      	str	r3, [r0, #24]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	305c      	adds	r0, #92	; 0x5c
 8004baa:	f7ff fdef 	bl	800478c <memset>
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <std+0x38>)
 8004bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std+0x3c>)
 8004bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <std+0x40>)
 8004bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x44>)
 8004bbc:	6224      	str	r4, [r4, #32]
 8004bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	bf00      	nop
 8004bc4:	08005029 	.word	0x08005029
 8004bc8:	0800504b 	.word	0x0800504b
 8004bcc:	08005083 	.word	0x08005083
 8004bd0:	080050a7 	.word	0x080050a7

08004bd4 <_cleanup_r>:
 8004bd4:	4901      	ldr	r1, [pc, #4]	; (8004bdc <_cleanup_r+0x8>)
 8004bd6:	f000 b8af 	b.w	8004d38 <_fwalk_reent>
 8004bda:	bf00      	nop
 8004bdc:	08004b15 	.word	0x08004b15

08004be0 <__sfmoreglue>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2268      	movs	r2, #104	; 0x68
 8004be4:	1e4d      	subs	r5, r1, #1
 8004be6:	4355      	muls	r5, r2
 8004be8:	460e      	mov	r6, r1
 8004bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bee:	f000 f997 	bl	8004f20 <_malloc_r>
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	b140      	cbz	r0, 8004c08 <__sfmoreglue+0x28>
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8004bfc:	300c      	adds	r0, #12
 8004bfe:	60a0      	str	r0, [r4, #8]
 8004c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c04:	f7ff fdc2 	bl	800478c <memset>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}

08004c0c <__sfp_lock_acquire>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	; (8004c14 <__sfp_lock_acquire+0x8>)
 8004c0e:	f000 b8b3 	b.w	8004d78 <__retarget_lock_acquire_recursive>
 8004c12:	bf00      	nop
 8004c14:	20012e89 	.word	0x20012e89

08004c18 <__sfp_lock_release>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__sfp_lock_release+0x8>)
 8004c1a:	f000 b8ae 	b.w	8004d7a <__retarget_lock_release_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20012e89 	.word	0x20012e89

08004c24 <__sinit_lock_acquire>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__sinit_lock_acquire+0x8>)
 8004c26:	f000 b8a7 	b.w	8004d78 <__retarget_lock_acquire_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20012e8a 	.word	0x20012e8a

08004c30 <__sinit_lock_release>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__sinit_lock_release+0x8>)
 8004c32:	f000 b8a2 	b.w	8004d7a <__retarget_lock_release_recursive>
 8004c36:	bf00      	nop
 8004c38:	20012e8a 	.word	0x20012e8a

08004c3c <__sinit>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	f7ff fff0 	bl	8004c24 <__sinit_lock_acquire>
 8004c44:	69a3      	ldr	r3, [r4, #24]
 8004c46:	b11b      	cbz	r3, 8004c50 <__sinit+0x14>
 8004c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c4c:	f7ff bff0 	b.w	8004c30 <__sinit_lock_release>
 8004c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c54:	6523      	str	r3, [r4, #80]	; 0x50
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <__sinit+0x68>)
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <__sinit+0x6c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	bf04      	itt	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	61a3      	streq	r3, [r4, #24]
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f820 	bl	8004cac <__sfp>
 8004c6c:	6060      	str	r0, [r4, #4]
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f81c 	bl	8004cac <__sfp>
 8004c74:	60a0      	str	r0, [r4, #8]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f818 	bl	8004cac <__sfp>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60e0      	str	r0, [r4, #12]
 8004c80:	2104      	movs	r1, #4
 8004c82:	6860      	ldr	r0, [r4, #4]
 8004c84:	f7ff ff82 	bl	8004b8c <std>
 8004c88:	68a0      	ldr	r0, [r4, #8]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	2109      	movs	r1, #9
 8004c8e:	f7ff ff7d 	bl	8004b8c <std>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	2202      	movs	r2, #2
 8004c96:	2112      	movs	r1, #18
 8004c98:	f7ff ff78 	bl	8004b8c <std>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61a3      	str	r3, [r4, #24]
 8004ca0:	e7d2      	b.n	8004c48 <__sinit+0xc>
 8004ca2:	bf00      	nop
 8004ca4:	0800523c 	.word	0x0800523c
 8004ca8:	08004bd5 	.word	0x08004bd5

08004cac <__sfp>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	4607      	mov	r7, r0
 8004cb0:	f7ff ffac 	bl	8004c0c <__sfp_lock_acquire>
 8004cb4:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <__sfp+0x84>)
 8004cb6:	681e      	ldr	r6, [r3, #0]
 8004cb8:	69b3      	ldr	r3, [r6, #24]
 8004cba:	b913      	cbnz	r3, 8004cc2 <__sfp+0x16>
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7ff ffbd 	bl	8004c3c <__sinit>
 8004cc2:	3648      	adds	r6, #72	; 0x48
 8004cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	d503      	bpl.n	8004cd4 <__sfp+0x28>
 8004ccc:	6833      	ldr	r3, [r6, #0]
 8004cce:	b30b      	cbz	r3, 8004d14 <__sfp+0x68>
 8004cd0:	6836      	ldr	r6, [r6, #0]
 8004cd2:	e7f7      	b.n	8004cc4 <__sfp+0x18>
 8004cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cd8:	b9d5      	cbnz	r5, 8004d10 <__sfp+0x64>
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <__sfp+0x88>)
 8004cdc:	60e3      	str	r3, [r4, #12]
 8004cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ce4:	f000 f847 	bl	8004d76 <__retarget_lock_init_recursive>
 8004ce8:	f7ff ff96 	bl	8004c18 <__sfp_lock_release>
 8004cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cf4:	6025      	str	r5, [r4, #0]
 8004cf6:	61a5      	str	r5, [r4, #24]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d00:	f7ff fd44 	bl	800478c <memset>
 8004d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d10:	3468      	adds	r4, #104	; 0x68
 8004d12:	e7d9      	b.n	8004cc8 <__sfp+0x1c>
 8004d14:	2104      	movs	r1, #4
 8004d16:	4638      	mov	r0, r7
 8004d18:	f7ff ff62 	bl	8004be0 <__sfmoreglue>
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	6030      	str	r0, [r6, #0]
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1d5      	bne.n	8004cd0 <__sfp+0x24>
 8004d24:	f7ff ff78 	bl	8004c18 <__sfp_lock_release>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	e7ee      	b.n	8004d0c <__sfp+0x60>
 8004d2e:	bf00      	nop
 8004d30:	0800523c 	.word	0x0800523c
 8004d34:	ffff0001 	.word	0xffff0001

08004d38 <_fwalk_reent>:
 8004d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	4688      	mov	r8, r1
 8004d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d44:	2700      	movs	r7, #0
 8004d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d4e:	d505      	bpl.n	8004d5c <_fwalk_reent+0x24>
 8004d50:	6824      	ldr	r4, [r4, #0]
 8004d52:	2c00      	cmp	r4, #0
 8004d54:	d1f7      	bne.n	8004d46 <_fwalk_reent+0xe>
 8004d56:	4638      	mov	r0, r7
 8004d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5c:	89ab      	ldrh	r3, [r5, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d907      	bls.n	8004d72 <_fwalk_reent+0x3a>
 8004d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d66:	3301      	adds	r3, #1
 8004d68:	d003      	beq.n	8004d72 <_fwalk_reent+0x3a>
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	47c0      	blx	r8
 8004d70:	4307      	orrs	r7, r0
 8004d72:	3568      	adds	r5, #104	; 0x68
 8004d74:	e7e9      	b.n	8004d4a <_fwalk_reent+0x12>

08004d76 <__retarget_lock_init_recursive>:
 8004d76:	4770      	bx	lr

08004d78 <__retarget_lock_acquire_recursive>:
 8004d78:	4770      	bx	lr

08004d7a <__retarget_lock_release_recursive>:
 8004d7a:	4770      	bx	lr

08004d7c <__swhatbuf_r>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	460e      	mov	r6, r1
 8004d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d84:	2900      	cmp	r1, #0
 8004d86:	b096      	sub	sp, #88	; 0x58
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	da08      	bge.n	8004da0 <__swhatbuf_r+0x24>
 8004d8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	061a      	lsls	r2, r3, #24
 8004d98:	d410      	bmi.n	8004dbc <__swhatbuf_r+0x40>
 8004d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9e:	e00e      	b.n	8004dbe <__swhatbuf_r+0x42>
 8004da0:	466a      	mov	r2, sp
 8004da2:	f000 f9a7 	bl	80050f4 <_fstat_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dbf1      	blt.n	8004d8e <__swhatbuf_r+0x12>
 8004daa:	9a01      	ldr	r2, [sp, #4]
 8004dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004db4:	425a      	negs	r2, r3
 8004db6:	415a      	adcs	r2, r3
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	e7ee      	b.n	8004d9a <__swhatbuf_r+0x1e>
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	b016      	add	sp, #88	; 0x58
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dc8 <__smakebuf_r>:
 8004dc8:	898b      	ldrh	r3, [r1, #12]
 8004dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dcc:	079d      	lsls	r5, r3, #30
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	d507      	bpl.n	8004de4 <__smakebuf_r+0x1c>
 8004dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	6163      	str	r3, [r4, #20]
 8004de0:	b002      	add	sp, #8
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	ab01      	add	r3, sp, #4
 8004de6:	466a      	mov	r2, sp
 8004de8:	f7ff ffc8 	bl	8004d7c <__swhatbuf_r>
 8004dec:	9900      	ldr	r1, [sp, #0]
 8004dee:	4605      	mov	r5, r0
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f895 	bl	8004f20 <_malloc_r>
 8004df6:	b948      	cbnz	r0, 8004e0c <__smakebuf_r+0x44>
 8004df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dfc:	059a      	lsls	r2, r3, #22
 8004dfe:	d4ef      	bmi.n	8004de0 <__smakebuf_r+0x18>
 8004e00:	f023 0303 	bic.w	r3, r3, #3
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	e7e3      	b.n	8004dd4 <__smakebuf_r+0xc>
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <__smakebuf_r+0x7c>)
 8004e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	9b00      	ldr	r3, [sp, #0]
 8004e1c:	6163      	str	r3, [r4, #20]
 8004e1e:	9b01      	ldr	r3, [sp, #4]
 8004e20:	6120      	str	r0, [r4, #16]
 8004e22:	b15b      	cbz	r3, 8004e3c <__smakebuf_r+0x74>
 8004e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f000 f975 	bl	8005118 <_isatty_r>
 8004e2e:	b128      	cbz	r0, 8004e3c <__smakebuf_r+0x74>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	89a0      	ldrh	r0, [r4, #12]
 8004e3e:	4305      	orrs	r5, r0
 8004e40:	81a5      	strh	r5, [r4, #12]
 8004e42:	e7cd      	b.n	8004de0 <__smakebuf_r+0x18>
 8004e44:	08004bd5 	.word	0x08004bd5

08004e48 <_free_r>:
 8004e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	d044      	beq.n	8004ed8 <_free_r+0x90>
 8004e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e52:	9001      	str	r0, [sp, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f1a1 0404 	sub.w	r4, r1, #4
 8004e5a:	bfb8      	it	lt
 8004e5c:	18e4      	addlt	r4, r4, r3
 8004e5e:	f000 f97d 	bl	800515c <__malloc_lock>
 8004e62:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <_free_r+0x94>)
 8004e64:	9801      	ldr	r0, [sp, #4]
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	b933      	cbnz	r3, 8004e78 <_free_r+0x30>
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	6014      	str	r4, [r2, #0]
 8004e6e:	b003      	add	sp, #12
 8004e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e74:	f000 b978 	b.w	8005168 <__malloc_unlock>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d908      	bls.n	8004e8e <_free_r+0x46>
 8004e7c:	6825      	ldr	r5, [r4, #0]
 8004e7e:	1961      	adds	r1, r4, r5
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf01      	itttt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	1949      	addeq	r1, r1, r5
 8004e8a:	6021      	streq	r1, [r4, #0]
 8004e8c:	e7ed      	b.n	8004e6a <_free_r+0x22>
 8004e8e:	461a      	mov	r2, r3
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b10b      	cbz	r3, 8004e98 <_free_r+0x50>
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	d9fa      	bls.n	8004e8e <_free_r+0x46>
 8004e98:	6811      	ldr	r1, [r2, #0]
 8004e9a:	1855      	adds	r5, r2, r1
 8004e9c:	42a5      	cmp	r5, r4
 8004e9e:	d10b      	bne.n	8004eb8 <_free_r+0x70>
 8004ea0:	6824      	ldr	r4, [r4, #0]
 8004ea2:	4421      	add	r1, r4
 8004ea4:	1854      	adds	r4, r2, r1
 8004ea6:	42a3      	cmp	r3, r4
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	d1e0      	bne.n	8004e6e <_free_r+0x26>
 8004eac:	681c      	ldr	r4, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	6053      	str	r3, [r2, #4]
 8004eb2:	4421      	add	r1, r4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	e7da      	b.n	8004e6e <_free_r+0x26>
 8004eb8:	d902      	bls.n	8004ec0 <_free_r+0x78>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	6003      	str	r3, [r0, #0]
 8004ebe:	e7d6      	b.n	8004e6e <_free_r+0x26>
 8004ec0:	6825      	ldr	r5, [r4, #0]
 8004ec2:	1961      	adds	r1, r4, r5
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	bf04      	itt	eq
 8004ec8:	6819      	ldreq	r1, [r3, #0]
 8004eca:	685b      	ldreq	r3, [r3, #4]
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	bf04      	itt	eq
 8004ed0:	1949      	addeq	r1, r1, r5
 8004ed2:	6021      	streq	r1, [r4, #0]
 8004ed4:	6054      	str	r4, [r2, #4]
 8004ed6:	e7ca      	b.n	8004e6e <_free_r+0x26>
 8004ed8:	b003      	add	sp, #12
 8004eda:	bd30      	pop	{r4, r5, pc}
 8004edc:	20012e8c 	.word	0x20012e8c

08004ee0 <sbrk_aligned>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4e0e      	ldr	r6, [pc, #56]	; (8004f1c <sbrk_aligned+0x3c>)
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	6831      	ldr	r1, [r6, #0]
 8004ee8:	4605      	mov	r5, r0
 8004eea:	b911      	cbnz	r1, 8004ef2 <sbrk_aligned+0x12>
 8004eec:	f000 f88c 	bl	8005008 <_sbrk_r>
 8004ef0:	6030      	str	r0, [r6, #0]
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 f887 	bl	8005008 <_sbrk_r>
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	d00a      	beq.n	8004f14 <sbrk_aligned+0x34>
 8004efe:	1cc4      	adds	r4, r0, #3
 8004f00:	f024 0403 	bic.w	r4, r4, #3
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d007      	beq.n	8004f18 <sbrk_aligned+0x38>
 8004f08:	1a21      	subs	r1, r4, r0
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 f87c 	bl	8005008 <_sbrk_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d101      	bne.n	8004f18 <sbrk_aligned+0x38>
 8004f14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f18:	4620      	mov	r0, r4
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	20012e90 	.word	0x20012e90

08004f20 <_malloc_r>:
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	1ccd      	adds	r5, r1, #3
 8004f26:	f025 0503 	bic.w	r5, r5, #3
 8004f2a:	3508      	adds	r5, #8
 8004f2c:	2d0c      	cmp	r5, #12
 8004f2e:	bf38      	it	cc
 8004f30:	250c      	movcc	r5, #12
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	4607      	mov	r7, r0
 8004f36:	db01      	blt.n	8004f3c <_malloc_r+0x1c>
 8004f38:	42a9      	cmp	r1, r5
 8004f3a:	d905      	bls.n	8004f48 <_malloc_r+0x28>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	2600      	movs	r6, #0
 8004f42:	4630      	mov	r0, r6
 8004f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f48:	4e2e      	ldr	r6, [pc, #184]	; (8005004 <_malloc_r+0xe4>)
 8004f4a:	f000 f907 	bl	800515c <__malloc_lock>
 8004f4e:	6833      	ldr	r3, [r6, #0]
 8004f50:	461c      	mov	r4, r3
 8004f52:	bb34      	cbnz	r4, 8004fa2 <_malloc_r+0x82>
 8004f54:	4629      	mov	r1, r5
 8004f56:	4638      	mov	r0, r7
 8004f58:	f7ff ffc2 	bl	8004ee0 <sbrk_aligned>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	4604      	mov	r4, r0
 8004f60:	d14d      	bne.n	8004ffe <_malloc_r+0xde>
 8004f62:	6834      	ldr	r4, [r6, #0]
 8004f64:	4626      	mov	r6, r4
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d140      	bne.n	8004fec <_malloc_r+0xcc>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4638      	mov	r0, r7
 8004f70:	eb04 0803 	add.w	r8, r4, r3
 8004f74:	f000 f848 	bl	8005008 <_sbrk_r>
 8004f78:	4580      	cmp	r8, r0
 8004f7a:	d13a      	bne.n	8004ff2 <_malloc_r+0xd2>
 8004f7c:	6821      	ldr	r1, [r4, #0]
 8004f7e:	3503      	adds	r5, #3
 8004f80:	1a6d      	subs	r5, r5, r1
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4638      	mov	r0, r7
 8004f92:	f7ff ffa5 	bl	8004ee0 <sbrk_aligned>
 8004f96:	3001      	adds	r0, #1
 8004f98:	d02b      	beq.n	8004ff2 <_malloc_r+0xd2>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	442b      	add	r3, r5
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	e00e      	b.n	8004fc0 <_malloc_r+0xa0>
 8004fa2:	6822      	ldr	r2, [r4, #0]
 8004fa4:	1b52      	subs	r2, r2, r5
 8004fa6:	d41e      	bmi.n	8004fe6 <_malloc_r+0xc6>
 8004fa8:	2a0b      	cmp	r2, #11
 8004faa:	d916      	bls.n	8004fda <_malloc_r+0xba>
 8004fac:	1961      	adds	r1, r4, r5
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	6025      	str	r5, [r4, #0]
 8004fb2:	bf18      	it	ne
 8004fb4:	6059      	strne	r1, [r3, #4]
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	bf08      	it	eq
 8004fba:	6031      	streq	r1, [r6, #0]
 8004fbc:	5162      	str	r2, [r4, r5]
 8004fbe:	604b      	str	r3, [r1, #4]
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f104 060b 	add.w	r6, r4, #11
 8004fc6:	f000 f8cf 	bl	8005168 <__malloc_unlock>
 8004fca:	f026 0607 	bic.w	r6, r6, #7
 8004fce:	1d23      	adds	r3, r4, #4
 8004fd0:	1af2      	subs	r2, r6, r3
 8004fd2:	d0b6      	beq.n	8004f42 <_malloc_r+0x22>
 8004fd4:	1b9b      	subs	r3, r3, r6
 8004fd6:	50a3      	str	r3, [r4, r2]
 8004fd8:	e7b3      	b.n	8004f42 <_malloc_r+0x22>
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	bf0c      	ite	eq
 8004fe0:	6032      	streq	r2, [r6, #0]
 8004fe2:	605a      	strne	r2, [r3, #4]
 8004fe4:	e7ec      	b.n	8004fc0 <_malloc_r+0xa0>
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	6864      	ldr	r4, [r4, #4]
 8004fea:	e7b2      	b.n	8004f52 <_malloc_r+0x32>
 8004fec:	4634      	mov	r4, r6
 8004fee:	6876      	ldr	r6, [r6, #4]
 8004ff0:	e7b9      	b.n	8004f66 <_malloc_r+0x46>
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f000 f8b6 	bl	8005168 <__malloc_unlock>
 8004ffc:	e7a1      	b.n	8004f42 <_malloc_r+0x22>
 8004ffe:	6025      	str	r5, [r4, #0]
 8005000:	e7de      	b.n	8004fc0 <_malloc_r+0xa0>
 8005002:	bf00      	nop
 8005004:	20012e8c 	.word	0x20012e8c

08005008 <_sbrk_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_sbrk_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f000 f8c0 	bl	8005198 <_sbrk>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_sbrk_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_sbrk_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20012e94 	.word	0x20012e94

08005028 <__sread>:
 8005028:	b510      	push	{r4, lr}
 800502a:	460c      	mov	r4, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	f000 f8a0 	bl	8005174 <_read_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	bfab      	itete	ge
 8005038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503a:	89a3      	ldrhlt	r3, [r4, #12]
 800503c:	181b      	addge	r3, r3, r0
 800503e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005042:	bfac      	ite	ge
 8005044:	6563      	strge	r3, [r4, #84]	; 0x54
 8005046:	81a3      	strhlt	r3, [r4, #12]
 8005048:	bd10      	pop	{r4, pc}

0800504a <__swrite>:
 800504a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	461f      	mov	r7, r3
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	4605      	mov	r5, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4616      	mov	r6, r2
 800505a:	d505      	bpl.n	8005068 <__swrite+0x1e>
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2302      	movs	r3, #2
 8005062:	2200      	movs	r2, #0
 8005064:	f000 f868 	bl	8005138 <_lseek_r>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	f000 b817 	b.w	80050b0 <_write_r>

08005082 <__sseek>:
 8005082:	b510      	push	{r4, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508a:	f000 f855 	bl	8005138 <_lseek_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	bf15      	itete	ne
 8005094:	6560      	strne	r0, [r4, #84]	; 0x54
 8005096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800509e:	81a3      	strheq	r3, [r4, #12]
 80050a0:	bf18      	it	ne
 80050a2:	81a3      	strhne	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__sclose>:
 80050a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050aa:	f000 b813 	b.w	80050d4 <_close_r>
	...

080050b0 <_write_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	; (80050d0 <_write_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fb fd23 	bl	8000b0a <_write>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_write_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_write_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20012e94 	.word	0x20012e94

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_close_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fb fd2f 	bl	8000b42 <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20012e94 	.word	0x20012e94

080050f4 <_fstat_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4d07      	ldr	r5, [pc, #28]	; (8005114 <_fstat_r+0x20>)
 80050f8:	2300      	movs	r3, #0
 80050fa:	4604      	mov	r4, r0
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	f7fb fd2a 	bl	8000b5a <_fstat>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d102      	bne.n	8005110 <_fstat_r+0x1c>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	b103      	cbz	r3, 8005110 <_fstat_r+0x1c>
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	bf00      	nop
 8005114:	20012e94 	.word	0x20012e94

08005118 <_isatty_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	; (8005134 <_isatty_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fb fd29 	bl	8000b7a <_isatty>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_isatty_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_isatty_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20012e94 	.word	0x20012e94

08005138 <_lseek_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	; (8005158 <_lseek_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fb fd22 	bl	8000b90 <_lseek>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_lseek_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_lseek_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20012e94 	.word	0x20012e94

0800515c <__malloc_lock>:
 800515c:	4801      	ldr	r0, [pc, #4]	; (8005164 <__malloc_lock+0x8>)
 800515e:	f7ff be0b 	b.w	8004d78 <__retarget_lock_acquire_recursive>
 8005162:	bf00      	nop
 8005164:	20012e88 	.word	0x20012e88

08005168 <__malloc_unlock>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__malloc_unlock+0x8>)
 800516a:	f7ff be06 	b.w	8004d7a <__retarget_lock_release_recursive>
 800516e:	bf00      	nop
 8005170:	20012e88 	.word	0x20012e88

08005174 <_read_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	; (8005194 <_read_r+0x20>)
 8005178:	4604      	mov	r4, r0
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	2200      	movs	r2, #0
 8005180:	602a      	str	r2, [r5, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7fb fca4 	bl	8000ad0 <_read>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_read_r+0x1e>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_read_r+0x1e>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20012e94 	.word	0x20012e94

08005198 <_sbrk>:
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <_sbrk+0x14>)
 800519a:	6811      	ldr	r1, [r2, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	b909      	cbnz	r1, 80051a4 <_sbrk+0xc>
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <_sbrk+0x18>)
 80051a2:	6011      	str	r1, [r2, #0]
 80051a4:	6810      	ldr	r0, [r2, #0]
 80051a6:	4403      	add	r3, r0
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4770      	bx	lr
 80051ac:	20012e98 	.word	0x20012e98
 80051b0:	20012ea0 	.word	0x20012ea0

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	bf00      	nop
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
